<?php
/**
 * CampaignDataTrackingData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * platform-api
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Content\Model;

use \ArrayAccess;
use \Sedo\ObjectSerializer;

/**
 * CampaignDataTrackingData Class Doc Comment
 *
 * @category Class
 * @description Tracking data for campaign
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignDataTrackingData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignData_trackingData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trafficSource' => 'string',
        'trackingSettings' => 'OneOfCampaignDataTrackingDataTrackingSettings',
        'trackingMethod' => 'string',
        'postbacks' => '\Sedo\SedoTMP\Content\Model\Postback[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trafficSource' => null,
        'trackingSettings' => null,
        'trackingMethod' => null,
        'postbacks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trafficSource' => 'trafficSource',
        'trackingSettings' => 'trackingSettings',
        'trackingMethod' => 'trackingMethod',
        'postbacks' => 'postbacks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trafficSource' => 'setTrafficSource',
        'trackingSettings' => 'setTrackingSettings',
        'trackingMethod' => 'setTrackingMethod',
        'postbacks' => 'setPostbacks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trafficSource' => 'getTrafficSource',
        'trackingSettings' => 'getTrackingSettings',
        'trackingMethod' => 'getTrackingMethod',
        'postbacks' => 'getPostbacks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRAFFIC_SOURCE_META = 'META';
    const TRAFFIC_SOURCE_OUTBRAIN = 'OUTBRAIN';
    const TRAFFIC_SOURCE_SNAPCHAT = 'SNAPCHAT';
    const TRAFFIC_SOURCE_TABOOLA = 'TABOOLA';
    const TRAFFIC_SOURCE_TIKTOK = 'TIKTOK';
    const TRAFFIC_SOURCE_X = 'X';
    const TRACKING_METHOD_S2_S = 'S2S';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrafficSourceAllowableValues()
    {
        return [
            self::TRAFFIC_SOURCE_META,
            self::TRAFFIC_SOURCE_OUTBRAIN,
            self::TRAFFIC_SOURCE_SNAPCHAT,
            self::TRAFFIC_SOURCE_TABOOLA,
            self::TRAFFIC_SOURCE_TIKTOK,
            self::TRAFFIC_SOURCE_X,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrackingMethodAllowableValues()
    {
        return [
            self::TRACKING_METHOD_S2_S,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trafficSource'] = isset($data['trafficSource']) ? $data['trafficSource'] : null;
        $this->container['trackingSettings'] = isset($data['trackingSettings']) ? $data['trackingSettings'] : null;
        $this->container['trackingMethod'] = isset($data['trackingMethod']) ? $data['trackingMethod'] : null;
        $this->container['postbacks'] = isset($data['postbacks']) ? $data['postbacks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['trafficSource'] === null) {
            $invalidProperties[] = "'trafficSource' can't be null";
        }
        $allowedValues = $this->getTrafficSourceAllowableValues();
        if (!is_null($this->container['trafficSource']) && !in_array($this->container['trafficSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trafficSource', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['trackingMethod'] === null) {
            $invalidProperties[] = "'trackingMethod' can't be null";
        }
        $allowedValues = $this->getTrackingMethodAllowableValues();
        if (!is_null($this->container['trackingMethod']) && !in_array($this->container['trackingMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trackingMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trafficSource
     *
     * @return string
     */
    public function getTrafficSource()
    {
        return $this->container['trafficSource'];
    }

    /**
     * Sets trafficSource
     *
     * @param string $trafficSource Traffic source is important for tracking conversions
     *
     * @return $this
     */
    public function setTrafficSource($trafficSource)
    {
        $allowedValues = $this->getTrafficSourceAllowableValues();
        if (!in_array($trafficSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trafficSource', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trafficSource'] = $trafficSource;

        return $this;
    }

    /**
     * Gets trackingSettings
     *
     * @return OneOfCampaignDataTrackingDataTrackingSettings
     */
    public function getTrackingSettings()
    {
        return $this->container['trackingSettings'];
    }

    /**
     * Sets trackingSettings
     *
     * @param OneOfCampaignDataTrackingDataTrackingSettings $trackingSettings trackingSettings
     *
     * @return $this
     */
    public function setTrackingSettings($trackingSettings)
    {
        $this->container['trackingSettings'] = $trackingSettings;

        return $this;
    }

    /**
     * Gets trackingMethod
     *
     * @return string
     */
    public function getTrackingMethod()
    {
        return $this->container['trackingMethod'];
    }

    /**
     * Sets trackingMethod
     *
     * @param string $trackingMethod Tracking method: currently only S2S is supported.
     *
     * @return $this
     */
    public function setTrackingMethod($trackingMethod)
    {
        $allowedValues = $this->getTrackingMethodAllowableValues();
        if (!in_array($trackingMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trackingMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trackingMethod'] = $trackingMethod;

        return $this;
    }

    /**
     * Gets postbacks
     *
     * @return \Sedo\SedoTMP\Content\Model\Postback[]
     */
    public function getPostbacks()
    {
        return $this->container['postbacks'];
    }

    /**
     * Sets postbacks
     *
     * @param \Sedo\SedoTMP\Content\Model\Postback[] $postbacks Define postbacks for events.  **Implementation Guidelines:** - For each event maximum one postback can be defined. - Ensure that the Click ID parameter in clickIdParam matches the one used in url. - Use {click_id} consistently for accurate conversion tracking. - Leverage additional macros to optimize tracking and reporting. - Test your postback setup before launching campaigns.
     *
     * @return $this
     */
    public function setPostbacks($postbacks)
    {
        $this->container['postbacks'] = $postbacks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
