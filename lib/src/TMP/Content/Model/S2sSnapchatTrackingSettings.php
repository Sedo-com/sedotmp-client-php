<?php
/**
 * S2sSnapchatTrackingSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * platform-api
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Content\Model;

use \ArrayAccess;
use \Sedo\ObjectSerializer;

/**
 * S2sSnapchatTrackingSettings Class Doc Comment
 *
 * @category Class
 * @description Settings for tracking with Snapchat traffic source.  More details on how to set up the tracking can be found in the [Snapchat Ads Manager](https://forbusiness.snapchat.com/blog/the-snap-pixel-how-it-works-and-how-to-install-it#installation)
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S2sSnapchatTrackingSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'S2sSnapchatTrackingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        's2sSnapchatToken' => 'string',
        's2sSnapchatPixelId' => 'string',
        's2sSnapchatLandingPageEvent' => 'AllOfS2sSnapchatTrackingSettingsS2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 'AllOfS2sSnapchatTrackingSettingsS2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 'AllOfS2sSnapchatTrackingSettingsS2sSnapchatClickEvent',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        's2sSnapchatToken' => null,
        's2sSnapchatPixelId' => null,
        's2sSnapchatLandingPageEvent' => null,
        's2sSnapchatSearchEvent' => null,
        's2sSnapchatClickEvent' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's2sSnapchatToken' => 's2sSnapchatToken',
        's2sSnapchatPixelId' => 's2sSnapchatPixelId',
        's2sSnapchatLandingPageEvent' => 's2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 's2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 's2sSnapchatClickEvent',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        's2sSnapchatToken' => 'setS2sSnapchatToken',
        's2sSnapchatPixelId' => 'setS2sSnapchatPixelId',
        's2sSnapchatLandingPageEvent' => 'setS2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 'setS2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 'setS2sSnapchatClickEvent',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        's2sSnapchatToken' => 'getS2sSnapchatToken',
        's2sSnapchatPixelId' => 'getS2sSnapchatPixelId',
        's2sSnapchatLandingPageEvent' => 'getS2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 'getS2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 'getS2sSnapchatClickEvent',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['s2sSnapchatToken'] = isset($data['s2sSnapchatToken']) ? $data['s2sSnapchatToken'] : null;
        $this->container['s2sSnapchatPixelId'] = isset($data['s2sSnapchatPixelId']) ? $data['s2sSnapchatPixelId'] : null;
        $this->container['s2sSnapchatLandingPageEvent'] = isset($data['s2sSnapchatLandingPageEvent']) ? $data['s2sSnapchatLandingPageEvent'] : null;
        $this->container['s2sSnapchatSearchEvent'] = isset($data['s2sSnapchatSearchEvent']) ? $data['s2sSnapchatSearchEvent'] : null;
        $this->container['s2sSnapchatClickEvent'] = isset($data['s2sSnapchatClickEvent']) ? $data['s2sSnapchatClickEvent'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['s2sSnapchatToken'] === null) {
            $invalidProperties[] = "'s2sSnapchatToken' can't be null";
        }
        if ($this->container['s2sSnapchatPixelId'] === null) {
            $invalidProperties[] = "'s2sSnapchatPixelId' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets s2sSnapchatToken
     *
     * @return string
     */
    public function getS2sSnapchatToken()
    {
        return $this->container['s2sSnapchatToken'];
    }

    /**
     * Sets s2sSnapchatToken
     *
     * @param string $s2sSnapchatToken Conversion API token.
     *
     * @return $this
     */
    public function setS2sSnapchatToken($s2sSnapchatToken)
    {
        $this->container['s2sSnapchatToken'] = $s2sSnapchatToken;

        return $this;
    }

    /**
     * Gets s2sSnapchatPixelId
     *
     * @return string
     */
    public function getS2sSnapchatPixelId()
    {
        return $this->container['s2sSnapchatPixelId'];
    }

    /**
     * Sets s2sSnapchatPixelId
     *
     * @param string $s2sSnapchatPixelId Event Pixel ID from Snapchat Ads Manager.  More details on how to set up the tracking can be found in the [Snapchat Ads Manager](https://forbusiness.snapchat.com/blog/the-snap-pixel-how-it-works-and-how-to-install-it#installation)
     *
     * @return $this
     */
    public function setS2sSnapchatPixelId($s2sSnapchatPixelId)
    {
        $this->container['s2sSnapchatPixelId'] = $s2sSnapchatPixelId;

        return $this;
    }

    /**
     * Gets s2sSnapchatLandingPageEvent
     *
     * @return AllOfS2sSnapchatTrackingSettingsS2sSnapchatLandingPageEvent
     */
    public function getS2sSnapchatLandingPageEvent()
    {
        return $this->container['s2sSnapchatLandingPageEvent'];
    }

    /**
     * Sets s2sSnapchatLandingPageEvent
     *
     * @param AllOfS2sSnapchatTrackingSettingsS2sSnapchatLandingPageEvent $s2sSnapchatLandingPageEvent Event name for the Landing Visit event.
     *
     * @return $this
     */
    public function setS2sSnapchatLandingPageEvent($s2sSnapchatLandingPageEvent)
    {
        $this->container['s2sSnapchatLandingPageEvent'] = $s2sSnapchatLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sSnapchatSearchEvent
     *
     * @return AllOfS2sSnapchatTrackingSettingsS2sSnapchatSearchEvent
     */
    public function getS2sSnapchatSearchEvent()
    {
        return $this->container['s2sSnapchatSearchEvent'];
    }

    /**
     * Sets s2sSnapchatSearchEvent
     *
     * @param AllOfS2sSnapchatTrackingSettingsS2sSnapchatSearchEvent $s2sSnapchatSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return $this
     */
    public function setS2sSnapchatSearchEvent($s2sSnapchatSearchEvent)
    {
        $this->container['s2sSnapchatSearchEvent'] = $s2sSnapchatSearchEvent;

        return $this;
    }

    /**
     * Gets s2sSnapchatClickEvent
     *
     * @return AllOfS2sSnapchatTrackingSettingsS2sSnapchatClickEvent
     */
    public function getS2sSnapchatClickEvent()
    {
        return $this->container['s2sSnapchatClickEvent'];
    }

    /**
     * Sets s2sSnapchatClickEvent
     *
     * @param AllOfS2sSnapchatTrackingSettingsS2sSnapchatClickEvent $s2sSnapchatClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return $this
     */
    public function setS2sSnapchatClickEvent($s2sSnapchatClickEvent)
    {
        $this->container['s2sSnapchatClickEvent'] = $s2sSnapchatClickEvent;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
