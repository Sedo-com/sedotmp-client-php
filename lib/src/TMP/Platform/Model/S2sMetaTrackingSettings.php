<?php
/**
 * S2sMetaTrackingSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * platform-api
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Platform\Model;

use \ArrayAccess;
use \Sedo\ObjectSerializer;

/**
 * S2sMetaTrackingSettings Class Doc Comment
 *
 * @category Class
 * @description Settings for tracking with Meta traffic source.  More details on how to set up the tracking can be found in the [Meta conversion tracking API documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/get-started/)
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S2sMetaTrackingSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'S2sMetaTrackingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        's2sMetaToken' => 'string',
        's2sMetaPixelId' => 'string',
        's2sMetaLandingPageEvent' => 'string',
        's2sMetaClickEvent' => 'string',
        's2sMetaSearchEvent' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        's2sMetaToken' => null,
        's2sMetaPixelId' => null,
        's2sMetaLandingPageEvent' => null,
        's2sMetaClickEvent' => null,
        's2sMetaSearchEvent' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's2sMetaToken' => 's2sMetaToken',
        's2sMetaPixelId' => 's2sMetaPixelId',
        's2sMetaLandingPageEvent' => 's2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 's2sMetaClickEvent',
        's2sMetaSearchEvent' => 's2sMetaSearchEvent',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        's2sMetaToken' => 'setS2sMetaToken',
        's2sMetaPixelId' => 'setS2sMetaPixelId',
        's2sMetaLandingPageEvent' => 'setS2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 'setS2sMetaClickEvent',
        's2sMetaSearchEvent' => 'setS2sMetaSearchEvent',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        's2sMetaToken' => 'getS2sMetaToken',
        's2sMetaPixelId' => 'getS2sMetaPixelId',
        's2sMetaLandingPageEvent' => 'getS2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 'getS2sMetaClickEvent',
        's2sMetaSearchEvent' => 'getS2sMetaSearchEvent',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['s2sMetaToken'] = isset($data['s2sMetaToken']) ? $data['s2sMetaToken'] : null;
        $this->container['s2sMetaPixelId'] = isset($data['s2sMetaPixelId']) ? $data['s2sMetaPixelId'] : null;
        $this->container['s2sMetaLandingPageEvent'] = isset($data['s2sMetaLandingPageEvent']) ? $data['s2sMetaLandingPageEvent'] : null;
        $this->container['s2sMetaClickEvent'] = isset($data['s2sMetaClickEvent']) ? $data['s2sMetaClickEvent'] : null;
        $this->container['s2sMetaSearchEvent'] = isset($data['s2sMetaSearchEvent']) ? $data['s2sMetaSearchEvent'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets s2sMetaToken
     *
     * @return string
     */
    public function getS2sMetaToken()
    {
        return $this->container['s2sMetaToken'];
    }

    /**
     * Sets s2sMetaToken
     *
     * @param string $s2sMetaToken Conversion API token
     *
     * @return $this
     */
    public function setS2sMetaToken($s2sMetaToken)
    {
        $this->container['s2sMetaToken'] = $s2sMetaToken;

        return $this;
    }

    /**
     * Gets s2sMetaPixelId
     *
     * @return string
     */
    public function getS2sMetaPixelId()
    {
        return $this->container['s2sMetaPixelId'];
    }

    /**
     * Sets s2sMetaPixelId
     *
     * @param string $s2sMetaPixelId Pixel ID from Meta Events Manager. See for more details: https://www.facebook.com/business/help/952192354843755?id=1205376682832142  More details on how to set up the tracking can be found in the [Meta conversion tracking API documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/get-started/)
     *
     * @return $this
     */
    public function setS2sMetaPixelId($s2sMetaPixelId)
    {
        $this->container['s2sMetaPixelId'] = $s2sMetaPixelId;

        return $this;
    }

    /**
     * Gets s2sMetaLandingPageEvent
     *
     * @return string
     */
    public function getS2sMetaLandingPageEvent()
    {
        return $this->container['s2sMetaLandingPageEvent'];
    }

    /**
     * Sets s2sMetaLandingPageEvent
     *
     * @param string $s2sMetaLandingPageEvent Event name for the Landing Visit event.
     *
     * @return $this
     */
    public function setS2sMetaLandingPageEvent($s2sMetaLandingPageEvent)
    {
        $this->container['s2sMetaLandingPageEvent'] = $s2sMetaLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sMetaClickEvent
     *
     * @return string
     */
    public function getS2sMetaClickEvent()
    {
        return $this->container['s2sMetaClickEvent'];
    }

    /**
     * Sets s2sMetaClickEvent
     *
     * @param string $s2sMetaClickEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return $this
     */
    public function setS2sMetaClickEvent($s2sMetaClickEvent)
    {
        $this->container['s2sMetaClickEvent'] = $s2sMetaClickEvent;

        return $this;
    }

    /**
     * Gets s2sMetaSearchEvent
     *
     * @return string
     */
    public function getS2sMetaSearchEvent()
    {
        return $this->container['s2sMetaSearchEvent'];
    }

    /**
     * Sets s2sMetaSearchEvent
     *
     * @param string $s2sMetaSearchEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return $this
     */
    public function setS2sMetaSearchEvent($s2sMetaSearchEvent)
    {
        $this->container['s2sMetaSearchEvent'] = $s2sMetaSearchEvent;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
