<?php
/**
 * ContentCampaignResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * platform-api
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Platform\Model;

use \ArrayAccess;
use \Sedo\ObjectSerializer;

/**
 * ContentCampaignResponse Class Doc Comment
 *
 * @category Class
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentCampaignResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContentCampaignResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '\Sedo\SedoTMP\Platform\Model\Id',
        'partner' => '\Sedo\SedoTMP\Platform\Model\Partner',
        'trackingUrl' => 'string',
        'publishDomainName' => 'string',
        'article' => 'AllOfContentCampaignResponseArticle',
        'campaign' => 'AllOfContentCampaignResponseCampaign',
        'status' => '\Sedo\SedoTMP\Platform\Model\ContentCampaignStatus',
        'processingErrorDetails' => '\Sedo\SedoTMP\Platform\Model\Problem',
        'createdDate' => '\Sedo\SedoTMP\Platform\Model\Timestamp',
        'createdBy' => '\Sedo\SedoTMP\Platform\Model\User',
        'lastModifiedDate' => '\Sedo\SedoTMP\Platform\Model\Timestamp',
        'lastModifiedBy' => '\Sedo\SedoTMP\Platform\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'partner' => null,
        'trackingUrl' => null,
        'publishDomainName' => null,
        'article' => null,
        'campaign' => null,
        'status' => null,
        'processingErrorDetails' => null,
        'createdDate' => null,
        'createdBy' => null,
        'lastModifiedDate' => null,
        'lastModifiedBy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner' => 'partner',
        'trackingUrl' => 'trackingUrl',
        'publishDomainName' => 'publishDomainName',
        'article' => 'article',
        'campaign' => 'campaign',
        'status' => 'status',
        'processingErrorDetails' => 'processingErrorDetails',
        'createdDate' => 'createdDate',
        'createdBy' => 'createdBy',
        'lastModifiedDate' => 'lastModifiedDate',
        'lastModifiedBy' => 'lastModifiedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner' => 'setPartner',
        'trackingUrl' => 'setTrackingUrl',
        'publishDomainName' => 'setPublishDomainName',
        'article' => 'setArticle',
        'campaign' => 'setCampaign',
        'status' => 'setStatus',
        'processingErrorDetails' => 'setProcessingErrorDetails',
        'createdDate' => 'setCreatedDate',
        'createdBy' => 'setCreatedBy',
        'lastModifiedDate' => 'setLastModifiedDate',
        'lastModifiedBy' => 'setLastModifiedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner' => 'getPartner',
        'trackingUrl' => 'getTrackingUrl',
        'publishDomainName' => 'getPublishDomainName',
        'article' => 'getArticle',
        'campaign' => 'getCampaign',
        'status' => 'getStatus',
        'processingErrorDetails' => 'getProcessingErrorDetails',
        'createdDate' => 'getCreatedDate',
        'createdBy' => 'getCreatedBy',
        'lastModifiedDate' => 'getLastModifiedDate',
        'lastModifiedBy' => 'getLastModifiedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['trackingUrl'] = isset($data['trackingUrl']) ? $data['trackingUrl'] : null;
        $this->container['publishDomainName'] = isset($data['publishDomainName']) ? $data['publishDomainName'] : null;
        $this->container['article'] = isset($data['article']) ? $data['article'] : null;
        $this->container['campaign'] = isset($data['campaign']) ? $data['campaign'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['processingErrorDetails'] = isset($data['processingErrorDetails']) ? $data['processingErrorDetails'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['lastModifiedDate'] = isset($data['lastModifiedDate']) ? $data['lastModifiedDate'] : null;
        $this->container['lastModifiedBy'] = isset($data['lastModifiedBy']) ? $data['lastModifiedBy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \Sedo\SedoTMP\Platform\Model\Id
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Sedo\SedoTMP\Platform\Model\Id $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return \Sedo\SedoTMP\Platform\Model\Partner
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param \Sedo\SedoTMP\Platform\Model\Partner $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets trackingUrl
     *
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['trackingUrl'];
    }

    /**
     * Sets trackingUrl
     *
     * @param string $trackingUrl trackingUrl
     *
     * @return $this
     */
    public function setTrackingUrl($trackingUrl)
    {
        $this->container['trackingUrl'] = $trackingUrl;

        return $this;
    }

    /**
     * Gets publishDomainName
     *
     * @return string
     */
    public function getPublishDomainName()
    {
        return $this->container['publishDomainName'];
    }

    /**
     * Sets publishDomainName
     *
     * @param string $publishDomainName publishDomainName
     *
     * @return $this
     */
    public function setPublishDomainName($publishDomainName)
    {
        $this->container['publishDomainName'] = $publishDomainName;

        return $this;
    }

    /**
     * Gets article
     *
     * @return AllOfContentCampaignResponseArticle
     */
    public function getArticle()
    {
        return $this->container['article'];
    }

    /**
     * Sets article
     *
     * @param AllOfContentCampaignResponseArticle $article article
     *
     * @return $this
     */
    public function setArticle($article)
    {
        $this->container['article'] = $article;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return AllOfContentCampaignResponseCampaign
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param AllOfContentCampaignResponseCampaign $campaign campaign
     *
     * @return $this
     */
    public function setCampaign($campaign)
    {
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Sedo\SedoTMP\Platform\Model\ContentCampaignStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Sedo\SedoTMP\Platform\Model\ContentCampaignStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets processingErrorDetails
     *
     * @return \Sedo\SedoTMP\Platform\Model\Problem
     */
    public function getProcessingErrorDetails()
    {
        return $this->container['processingErrorDetails'];
    }

    /**
     * Sets processingErrorDetails
     *
     * @param \Sedo\SedoTMP\Platform\Model\Problem $processingErrorDetails processingErrorDetails
     *
     * @return $this
     */
    public function setProcessingErrorDetails($processingErrorDetails)
    {
        $this->container['processingErrorDetails'] = $processingErrorDetails;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \Sedo\SedoTMP\Platform\Model\Timestamp
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \Sedo\SedoTMP\Platform\Model\Timestamp $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \Sedo\SedoTMP\Platform\Model\User
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \Sedo\SedoTMP\Platform\Model\User $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \Sedo\SedoTMP\Platform\Model\Timestamp
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \Sedo\SedoTMP\Platform\Model\Timestamp $lastModifiedDate lastModifiedDate
     *
     * @return $this
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets lastModifiedBy
     *
     * @return \Sedo\SedoTMP\Platform\Model\User
     */
    public function getLastModifiedBy()
    {
        return $this->container['lastModifiedBy'];
    }

    /**
     * Sets lastModifiedBy
     *
     * @param \Sedo\SedoTMP\Platform\Model\User $lastModifiedBy lastModifiedBy
     *
     * @return $this
     */
    public function setLastModifiedBy($lastModifiedBy)
    {
        $this->container['lastModifiedBy'] = $lastModifiedBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
