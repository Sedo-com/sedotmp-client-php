<?php
/**
 * S2sTaboolaTrackingSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * platform-api
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Platform\Model;

use \ArrayAccess;
use \Sedo\ObjectSerializer;

/**
 * S2sTaboolaTrackingSettings Class Doc Comment
 *
 * @category Class
 * @description Settings for tracking with Snapchat traffic source.  Follow the Taboola guidelines to set up the Server-to-Server (S2S) Conversion in your Taboola account  [Taboola S2S Conversion Setup0](https://help.taboola.com/hc/en-us/articles/115006850567-How-to-Track-Conversions-Using-Server-to-Server-Integration-S2S)
 * @package  Sedo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S2sTaboolaTrackingSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'S2sTaboolaTrackingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        's2sTaboolaClickParam' => 'string',
        's2sTaboolaLandingPageEvent' => 'string',
        's2sTaboolaSearchEvent' => 'string',
        's2sTaboolaClickEvent' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        's2sTaboolaClickParam' => null,
        's2sTaboolaLandingPageEvent' => null,
        's2sTaboolaSearchEvent' => null,
        's2sTaboolaClickEvent' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's2sTaboolaClickParam' => 's2sTaboolaClickParam',
        's2sTaboolaLandingPageEvent' => 's2sTaboolaLandingPageEvent',
        's2sTaboolaSearchEvent' => 's2sTaboolaSearchEvent',
        's2sTaboolaClickEvent' => 's2sTaboolaClickEvent',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        's2sTaboolaClickParam' => 'setS2sTaboolaClickParam',
        's2sTaboolaLandingPageEvent' => 'setS2sTaboolaLandingPageEvent',
        's2sTaboolaSearchEvent' => 'setS2sTaboolaSearchEvent',
        's2sTaboolaClickEvent' => 'setS2sTaboolaClickEvent',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        's2sTaboolaClickParam' => 'getS2sTaboolaClickParam',
        's2sTaboolaLandingPageEvent' => 'getS2sTaboolaLandingPageEvent',
        's2sTaboolaSearchEvent' => 'getS2sTaboolaSearchEvent',
        's2sTaboolaClickEvent' => 'getS2sTaboolaClickEvent',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['s2sTaboolaClickParam'] = isset($data['s2sTaboolaClickParam']) ? $data['s2sTaboolaClickParam'] : null;
        $this->container['s2sTaboolaLandingPageEvent'] = isset($data['s2sTaboolaLandingPageEvent']) ? $data['s2sTaboolaLandingPageEvent'] : null;
        $this->container['s2sTaboolaSearchEvent'] = isset($data['s2sTaboolaSearchEvent']) ? $data['s2sTaboolaSearchEvent'] : null;
        $this->container['s2sTaboolaClickEvent'] = isset($data['s2sTaboolaClickEvent']) ? $data['s2sTaboolaClickEvent'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['s2sTaboolaClickParam'] === null) {
            $invalidProperties[] = "'s2sTaboolaClickParam' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets s2sTaboolaClickParam
     *
     * @return string
     */
    public function getS2sTaboolaClickParam()
    {
        return $this->container['s2sTaboolaClickParam'];
    }

    /**
     * Sets s2sTaboolaClickParam
     *
     * @param string $s2sTaboolaClickParam Follow the Taboola guidelines to set up the Server-to-Server (S2S) Conversion in your Taboola account: [Taboola S2S Conversion Setup0](https://help.taboola.com/hc/en-us/articles/115006850567-How-to-Track-Conversions-Using-Server-to-Server-Integration-S2S)  `s2sTaboolaClickParam` parameter is crucial for passing the Taboola Click ID back to Taboola, enabling effective tracking of your campaigns.  **Usage Instructions:**   1. When directing traffic to your RSoC articles, include the Taboola Click ID in the URL using a parameter name of your choice.   2. Ensure that the parameter name in the URL aligns with the name configured in s2sTaboolaClickParam.  **Example:**    If your traffic URL is structured as follows:   your-rsoc-domain.com/?campaign=12&taboola_click=23o4ij23o   Then, you should set the value of `s2sTaboolaClickParam` to `taboola_click`. This alignment guarantees proper tracking and reporting of your campaigns with Taboola.
     *
     * @return $this
     */
    public function setS2sTaboolaClickParam($s2sTaboolaClickParam)
    {
        $this->container['s2sTaboolaClickParam'] = $s2sTaboolaClickParam;

        return $this;
    }

    /**
     * Gets s2sTaboolaLandingPageEvent
     *
     * @return string
     */
    public function getS2sTaboolaLandingPageEvent()
    {
        return $this->container['s2sTaboolaLandingPageEvent'];
    }

    /**
     * Sets s2sTaboolaLandingPageEvent
     *
     * @param string $s2sTaboolaLandingPageEvent Event name for the Landing Visit event.
     *
     * @return $this
     */
    public function setS2sTaboolaLandingPageEvent($s2sTaboolaLandingPageEvent)
    {
        $this->container['s2sTaboolaLandingPageEvent'] = $s2sTaboolaLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sTaboolaSearchEvent
     *
     * @return string
     */
    public function getS2sTaboolaSearchEvent()
    {
        return $this->container['s2sTaboolaSearchEvent'];
    }

    /**
     * Sets s2sTaboolaSearchEvent
     *
     * @param string $s2sTaboolaSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return $this
     */
    public function setS2sTaboolaSearchEvent($s2sTaboolaSearchEvent)
    {
        $this->container['s2sTaboolaSearchEvent'] = $s2sTaboolaSearchEvent;

        return $this;
    }

    /**
     * Gets s2sTaboolaClickEvent
     *
     * @return string
     */
    public function getS2sTaboolaClickEvent()
    {
        return $this->container['s2sTaboolaClickEvent'];
    }

    /**
     * Sets s2sTaboolaClickEvent
     *
     * @param string $s2sTaboolaClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return $this
     */
    public function setS2sTaboolaClickEvent($s2sTaboolaClickEvent)
    {
        $this->container['s2sTaboolaClickEvent'] = $s2sTaboolaClickEvent;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
