<?php

/**
 * CampaignDataTrackingData.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * platform-api.
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Platform\Model;

use Sedo\ObjectSerializer;

/**
 * CampaignDataTrackingData Class Doc Comment.
 *
 * @category Class
 *
 * @description Tracking data for campaign
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class CampaignDataTrackingData implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'CampaignData_trackingData';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'trafficSource' => 'string',
        'trackingSettings' => '\Sedo\SedoTMP\Platform\Model\CampaignDataTrackingDataTrackingSettings',
        'trackingMethod' => 'string',
        'postbacks' => '\Sedo\SedoTMP\Platform\Model\Postback[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'trafficSource' => null,
        'trackingSettings' => null,
        'trackingMethod' => null,
        'postbacks' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'trafficSource' => false,
        'trackingSettings' => false,
        'trackingMethod' => false,
        'postbacks' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trafficSource' => 'trafficSource',
        'trackingSettings' => 'trackingSettings',
        'trackingMethod' => 'trackingMethod',
        'postbacks' => 'postbacks',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'trafficSource' => 'setTrafficSource',
        'trackingSettings' => 'setTrackingSettings',
        'trackingMethod' => 'setTrackingMethod',
        'postbacks' => 'setPostbacks',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'trafficSource' => 'getTrafficSource',
        'trackingSettings' => 'getTrackingSettings',
        'trackingMethod' => 'getTrackingMethod',
        'postbacks' => 'getPostbacks',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRAFFIC_SOURCE_META = 'META';
    public const TRAFFIC_SOURCE_OUTBRAIN = 'OUTBRAIN';
    public const TRAFFIC_SOURCE_SNAPCHAT = 'SNAPCHAT';
    public const TRAFFIC_SOURCE_TABOOLA = 'TABOOLA';
    public const TRAFFIC_SOURCE_TIKTOK = 'TIKTOK';
    public const TRAFFIC_SOURCE_X = 'X';
    public const TRACKING_METHOD_S2_S = 'S2S';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTrafficSourceAllowableValues()
    {
        return [
            self::TRAFFIC_SOURCE_META,
            self::TRAFFIC_SOURCE_OUTBRAIN,
            self::TRAFFIC_SOURCE_SNAPCHAT,
            self::TRAFFIC_SOURCE_TABOOLA,
            self::TRAFFIC_SOURCE_TIKTOK,
            self::TRAFFIC_SOURCE_X,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTrackingMethodAllowableValues()
    {
        return [
            self::TRACKING_METHOD_S2_S,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[]|null $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('trafficSource', $data ?? [], null);
        $this->setIfExists('trackingSettings', $data ?? [], null);
        $this->setIfExists('trackingMethod', $data ?? [], null);
        $this->setIfExists('postbacks', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['trafficSource']) {
            $invalidProperties[] = "'trafficSource' can't be null";
        }
        $allowedValues = $this->getTrafficSourceAllowableValues();
        if (!is_null($this->container['trafficSource']) && !in_array($this->container['trafficSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trafficSource', must be one of '%s'",
                $this->container['trafficSource'],
                implode("', '", $allowedValues)
            );
        }

        if (null === $this->container['trackingMethod']) {
            $invalidProperties[] = "'trackingMethod' can't be null";
        }
        $allowedValues = $this->getTrackingMethodAllowableValues();
        if (!is_null($this->container['trackingMethod']) && !in_array($this->container['trackingMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trackingMethod', must be one of '%s'",
                $this->container['trackingMethod'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets trafficSource.
     *
     * @return string
     */
    public function getTrafficSource()
    {
        return $this->container['trafficSource'];
    }

    /**
     * Sets trafficSource.
     *
     * @param string $trafficSource Traffic source is important for tracking conversions
     *
     * @return self
     */
    public function setTrafficSource($trafficSource)
    {
        if (is_null($trafficSource)) {
            throw new \InvalidArgumentException('non-nullable trafficSource cannot be null');
        }
        $allowedValues = $this->getTrafficSourceAllowableValues();
        if (!in_array($trafficSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'trafficSource', must be one of '%s'", $trafficSource, implode("', '", $allowedValues)));
        }
        $this->container['trafficSource'] = $trafficSource;

        return $this;
    }

    /**
     * Gets trackingSettings.
     *
     * @return CampaignDataTrackingDataTrackingSettings|null
     */
    public function getTrackingSettings()
    {
        return $this->container['trackingSettings'];
    }

    /**
     * Sets trackingSettings.
     *
     * @param CampaignDataTrackingDataTrackingSettings|null $trackingSettings trackingSettings
     *
     * @return self
     */
    public function setTrackingSettings($trackingSettings)
    {
        if (is_null($trackingSettings)) {
            throw new \InvalidArgumentException('non-nullable trackingSettings cannot be null');
        }
        $this->container['trackingSettings'] = $trackingSettings;

        return $this;
    }

    /**
     * Gets trackingMethod.
     *
     * @return string
     */
    public function getTrackingMethod()
    {
        return $this->container['trackingMethod'];
    }

    /**
     * Sets trackingMethod.
     *
     * @param string $trackingMethod tracking method: currently only S2S is supported
     *
     * @return self
     */
    public function setTrackingMethod($trackingMethod)
    {
        if (is_null($trackingMethod)) {
            throw new \InvalidArgumentException('non-nullable trackingMethod cannot be null');
        }
        $allowedValues = $this->getTrackingMethodAllowableValues();
        if (!in_array($trackingMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'trackingMethod', must be one of '%s'", $trackingMethod, implode("', '", $allowedValues)));
        }
        $this->container['trackingMethod'] = $trackingMethod;

        return $this;
    }

    /**
     * Gets postbacks.
     *
     * @return Postback[]|null
     */
    public function getPostbacks()
    {
        return $this->container['postbacks'];
    }

    /**
     * Sets postbacks.
     *
     * @param Postback[]|null $postbacks Define postbacks for events.  **Implementation Guidelines:** - For each event maximum one postback can be defined. - Ensure that the Click ID parameter in clickIdParam matches the one used in url. - Use {click_id} consistently for accurate conversion tracking. - Leverage additional macros to optimize tracking and reporting. - Test your postback setup before launching campaigns.
     *
     * @return self
     */
    public function setPostbacks($postbacks)
    {
        if (is_null($postbacks)) {
            throw new \InvalidArgumentException('non-nullable postbacks cannot be null');
        }
        $this->container['postbacks'] = $postbacks;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
