<?php

/**
 * S2sMetaTrackingSettings.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * platform-api.
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Platform\Model;

use Sedo\ObjectSerializer;

/**
 * S2sMetaTrackingSettings Class Doc Comment.
 *
 * @category Class
 *
 * @description Settings for tracking with Meta traffic source.  More details on how to set up the tracking can be found in the [Meta conversion tracking API documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/get-started/)
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class S2sMetaTrackingSettings implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'S2sMetaTrackingSettings';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        's2sMetaToken' => 'string',
        's2sMetaPixelId' => 'string',
        's2sMetaLandingPageEvent' => 'string',
        's2sMetaClickEvent' => 'string',
        's2sMetaSearchEvent' => 'string',
        'type' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        's2sMetaToken' => null,
        's2sMetaPixelId' => null,
        's2sMetaLandingPageEvent' => null,
        's2sMetaClickEvent' => null,
        's2sMetaSearchEvent' => null,
        'type' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        's2sMetaToken' => false,
        's2sMetaPixelId' => false,
        's2sMetaLandingPageEvent' => false,
        's2sMetaClickEvent' => false,
        's2sMetaSearchEvent' => false,
        'type' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's2sMetaToken' => 's2sMetaToken',
        's2sMetaPixelId' => 's2sMetaPixelId',
        's2sMetaLandingPageEvent' => 's2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 's2sMetaClickEvent',
        's2sMetaSearchEvent' => 's2sMetaSearchEvent',
        'type' => 'type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        's2sMetaToken' => 'setS2sMetaToken',
        's2sMetaPixelId' => 'setS2sMetaPixelId',
        's2sMetaLandingPageEvent' => 'setS2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 'setS2sMetaClickEvent',
        's2sMetaSearchEvent' => 'setS2sMetaSearchEvent',
        'type' => 'setType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        's2sMetaToken' => 'getS2sMetaToken',
        's2sMetaPixelId' => 'getS2sMetaPixelId',
        's2sMetaLandingPageEvent' => 'getS2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 'getS2sMetaClickEvent',
        's2sMetaSearchEvent' => 'getS2sMetaSearchEvent',
        'type' => 'getType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[]|null $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('s2sMetaToken', $data ?? [], null);
        $this->setIfExists('s2sMetaPixelId', $data ?? [], null);
        $this->setIfExists('s2sMetaLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sMetaClickEvent', $data ?? [], null);
        $this->setIfExists('s2sMetaSearchEvent', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['type']) {
            $invalidProperties[] = "'type' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets s2sMetaToken.
     *
     * @return string|null
     */
    public function getS2sMetaToken()
    {
        return $this->container['s2sMetaToken'];
    }

    /**
     * Sets s2sMetaToken.
     *
     * @param string|null $s2sMetaToken Conversion API token
     *
     * @return self
     */
    public function setS2sMetaToken($s2sMetaToken)
    {
        if (is_null($s2sMetaToken)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaToken cannot be null');
        }
        $this->container['s2sMetaToken'] = $s2sMetaToken;

        return $this;
    }

    /**
     * Gets s2sMetaPixelId.
     *
     * @return string|null
     */
    public function getS2sMetaPixelId()
    {
        return $this->container['s2sMetaPixelId'];
    }

    /**
     * Sets s2sMetaPixelId.
     *
     * @param string|null $s2sMetaPixelId Pixel ID from Meta Events Manager. See for more details: https://www.facebook.com/business/help/952192354843755?id=1205376682832142  More details on how to set up the tracking can be found in the [Meta conversion tracking API documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/get-started/)
     *
     * @return self
     */
    public function setS2sMetaPixelId($s2sMetaPixelId)
    {
        if (is_null($s2sMetaPixelId)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaPixelId cannot be null');
        }
        $this->container['s2sMetaPixelId'] = $s2sMetaPixelId;

        return $this;
    }

    /**
     * Gets s2sMetaLandingPageEvent.
     *
     * @return string|null
     */
    public function getS2sMetaLandingPageEvent()
    {
        return $this->container['s2sMetaLandingPageEvent'];
    }

    /**
     * Sets s2sMetaLandingPageEvent.
     *
     * @param string|null $s2sMetaLandingPageEvent event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sMetaLandingPageEvent($s2sMetaLandingPageEvent)
    {
        if (is_null($s2sMetaLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaLandingPageEvent cannot be null');
        }
        $this->container['s2sMetaLandingPageEvent'] = $s2sMetaLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sMetaClickEvent.
     *
     * @return string|null
     */
    public function getS2sMetaClickEvent()
    {
        return $this->container['s2sMetaClickEvent'];
    }

    /**
     * Sets s2sMetaClickEvent.
     *
     * @param string|null $s2sMetaClickEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sMetaClickEvent($s2sMetaClickEvent)
    {
        if (is_null($s2sMetaClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaClickEvent cannot be null');
        }
        $this->container['s2sMetaClickEvent'] = $s2sMetaClickEvent;

        return $this;
    }

    /**
     * Gets s2sMetaSearchEvent.
     *
     * @return string|null
     */
    public function getS2sMetaSearchEvent()
    {
        return $this->container['s2sMetaSearchEvent'];
    }

    /**
     * Sets s2sMetaSearchEvent.
     *
     * @param string|null $s2sMetaSearchEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sMetaSearchEvent($s2sMetaSearchEvent)
    {
        if (is_null($s2sMetaSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaSearchEvent cannot be null');
        }
        $this->container['s2sMetaSearchEvent'] = $s2sMetaSearchEvent;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
