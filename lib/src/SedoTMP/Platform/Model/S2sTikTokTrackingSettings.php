<?php

/**
 * S2sTikTokTrackingSettings.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * platform-api.
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\Platform\Model;

use Sedo\ObjectSerializer;

/**
 * S2sTikTokTrackingSettings Class Doc Comment.
 *
 * @category Class
 *
 * @description Settings for tracking with TikTok traffic source.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class S2sTikTokTrackingSettings implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'S2sTikTokTrackingSettings';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        's2sTikTokToken' => 'string',
        's2sTikTokPixelId' => 'string',
        's2sTikTokLandingPageEvent' => '\Sedo\SedoTMP\Platform\Model\S2sTikTokEventType',
        's2sTikTokSearchEvent' => '\Sedo\SedoTMP\Platform\Model\S2sTikTokEventType',
        's2sTikTokClickEvent' => '\Sedo\SedoTMP\Platform\Model\S2sTikTokEventType',
        'type' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        's2sTikTokToken' => null,
        's2sTikTokPixelId' => null,
        's2sTikTokLandingPageEvent' => null,
        's2sTikTokSearchEvent' => null,
        's2sTikTokClickEvent' => null,
        'type' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        's2sTikTokToken' => false,
        's2sTikTokPixelId' => false,
        's2sTikTokLandingPageEvent' => false,
        's2sTikTokSearchEvent' => false,
        's2sTikTokClickEvent' => false,
        'type' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's2sTikTokToken' => 's2sTikTokToken',
        's2sTikTokPixelId' => 's2sTikTokPixelId',
        's2sTikTokLandingPageEvent' => 's2sTikTokLandingPageEvent',
        's2sTikTokSearchEvent' => 's2sTikTokSearchEvent',
        's2sTikTokClickEvent' => 's2sTikTokClickEvent',
        'type' => 'type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        's2sTikTokToken' => 'setS2sTikTokToken',
        's2sTikTokPixelId' => 'setS2sTikTokPixelId',
        's2sTikTokLandingPageEvent' => 'setS2sTikTokLandingPageEvent',
        's2sTikTokSearchEvent' => 'setS2sTikTokSearchEvent',
        's2sTikTokClickEvent' => 'setS2sTikTokClickEvent',
        'type' => 'setType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        's2sTikTokToken' => 'getS2sTikTokToken',
        's2sTikTokPixelId' => 'getS2sTikTokPixelId',
        's2sTikTokLandingPageEvent' => 'getS2sTikTokLandingPageEvent',
        's2sTikTokSearchEvent' => 'getS2sTikTokSearchEvent',
        's2sTikTokClickEvent' => 'getS2sTikTokClickEvent',
        'type' => 'getType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[]|null $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('s2sTikTokToken', $data ?? [], null);
        $this->setIfExists('s2sTikTokPixelId', $data ?? [], null);
        $this->setIfExists('s2sTikTokLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sTikTokSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sTikTokClickEvent', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['s2sTikTokToken']) {
            $invalidProperties[] = "'s2sTikTokToken' can't be null";
        }
        if (null === $this->container['s2sTikTokPixelId']) {
            $invalidProperties[] = "'s2sTikTokPixelId' can't be null";
        }
        if (null === $this->container['type']) {
            $invalidProperties[] = "'type' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets s2sTikTokToken.
     *
     * @return string
     */
    public function getS2sTikTokToken()
    {
        return $this->container['s2sTikTokToken'];
    }

    /**
     * Sets s2sTikTokToken.
     *
     * @param string $s2sTikTokToken This is the API token required for authentication with the TikTok API. Ensure that you generate and securely store this token to facilitate server-to-server interactions.
     *
     * @return self
     */
    public function setS2sTikTokToken($s2sTikTokToken)
    {
        if (is_null($s2sTikTokToken)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokToken cannot be null');
        }
        $this->container['s2sTikTokToken'] = $s2sTikTokToken;

        return $this;
    }

    /**
     * Gets s2sTikTokPixelId.
     *
     * @return string
     */
    public function getS2sTikTokPixelId()
    {
        return $this->container['s2sTikTokPixelId'];
    }

    /**
     * Sets s2sTikTokPixelId.
     *
     * @param string $s2sTikTokPixelId This is the Event Pixel ID obtained from the TikTok Tracking section. It is essential for tracking user interactions on your landing pages.  For generating your Pixel ID, refer to the following resources:   [Get Started with Pixel](https://ads.tiktok.com/help/article/get-started-pixel)   [Pixel Sharing in Business Center](https://ads.tiktok.com/help/article/pixel-sharing-business-center)  Note: Make sure to configure the appropriate permissions in your TikTok account for the pixel to function correctly.
     *
     * @return self
     */
    public function setS2sTikTokPixelId($s2sTikTokPixelId)
    {
        if (is_null($s2sTikTokPixelId)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokPixelId cannot be null');
        }
        $this->container['s2sTikTokPixelId'] = $s2sTikTokPixelId;

        return $this;
    }

    /**
     * Gets s2sTikTokLandingPageEvent.
     *
     * @return S2sTikTokEventType|null
     */
    public function getS2sTikTokLandingPageEvent()
    {
        return $this->container['s2sTikTokLandingPageEvent'];
    }

    /**
     * Sets s2sTikTokLandingPageEvent.
     *
     * @param S2sTikTokEventType|null $s2sTikTokLandingPageEvent event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sTikTokLandingPageEvent($s2sTikTokLandingPageEvent)
    {
        if (is_null($s2sTikTokLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokLandingPageEvent cannot be null');
        }
        $this->container['s2sTikTokLandingPageEvent'] = $s2sTikTokLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sTikTokSearchEvent.
     *
     * @return S2sTikTokEventType|null
     */
    public function getS2sTikTokSearchEvent()
    {
        return $this->container['s2sTikTokSearchEvent'];
    }

    /**
     * Sets s2sTikTokSearchEvent.
     *
     * @param S2sTikTokEventType|null $s2sTikTokSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sTikTokSearchEvent($s2sTikTokSearchEvent)
    {
        if (is_null($s2sTikTokSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokSearchEvent cannot be null');
        }
        $this->container['s2sTikTokSearchEvent'] = $s2sTikTokSearchEvent;

        return $this;
    }

    /**
     * Gets s2sTikTokClickEvent.
     *
     * @return S2sTikTokEventType|null
     */
    public function getS2sTikTokClickEvent()
    {
        return $this->container['s2sTikTokClickEvent'];
    }

    /**
     * Sets s2sTikTokClickEvent.
     *
     * @param S2sTikTokEventType|null $s2sTikTokClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sTikTokClickEvent($s2sTikTokClickEvent)
    {
        if (is_null($s2sTikTokClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokClickEvent cannot be null');
        }
        $this->container['s2sTikTokClickEvent'] = $s2sTikTokClickEvent;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
