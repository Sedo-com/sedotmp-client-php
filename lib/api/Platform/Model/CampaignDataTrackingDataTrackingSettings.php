<?php

/**
 * CampaignDataTrackingDataTrackingSettings.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * platform-api.
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\OpenApi\Platform\Model;

use Sedo\SedoTMP\OpenApi\ObjectSerializer;

/**
 * CampaignDataTrackingDataTrackingSettings Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class CampaignDataTrackingDataTrackingSettings implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'CampaignData_trackingData_trackingSettings';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'pixelMetaPixelId' => 'string',
        'pixelMetaLandingPageEvent' => 'string',
        'pixelMetaClickEvent' => 'string',
        'pixelMetaSearchEvent' => 'string',
        'type' => 'string',
        's2sMetaToken' => 'string',
        's2sMetaPixelId' => 'string',
        's2sMetaLandingPageEvent' => 'string',
        's2sMetaClickEvent' => 'string',
        's2sMetaSearchEvent' => 'string',
        's2sOutbrainClickParam' => 'string',
        's2sOutbrainLandingPageEvent' => 'string',
        's2sOutbrainSearchEvent' => 'string',
        's2sOutbrainClickEvent' => 'string',
        's2sSnapchatToken' => 'string',
        's2sSnapchatPixelId' => 'string',
        's2sSnapchatLandingPageEvent' => '\Sedo\SedoTMP\OpenApi\Platform\Model\S2sSnapchatEventType',
        's2sSnapchatSearchEvent' => '\Sedo\SedoTMP\OpenApi\Platform\Model\S2sSnapchatEventType',
        's2sSnapchatClickEvent' => '\Sedo\SedoTMP\OpenApi\Platform\Model\S2sSnapchatEventType',
        's2sTaboolaClickParam' => 'string',
        's2sTaboolaLandingPageEvent' => 'string',
        's2sTaboolaSearchEvent' => 'string',
        's2sTaboolaClickEvent' => 'string',
        's2sTikTokToken' => 'string',
        's2sTikTokPixelId' => 'string',
        's2sTikTokLandingPageEvent' => '\Sedo\SedoTMP\OpenApi\Platform\Model\S2sTikTokEventType',
        's2sTikTokSearchEvent' => '\Sedo\SedoTMP\OpenApi\Platform\Model\S2sTikTokEventType',
        's2sTikTokClickEvent' => '\Sedo\SedoTMP\OpenApi\Platform\Model\S2sTikTokEventType',
        's2sXPixelId' => 'string',
        's2sXLandingPageEvent' => 'string',
        's2sXSearchEvent' => 'string',
        's2sXClickEvent' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'pixelMetaPixelId' => null,
        'pixelMetaLandingPageEvent' => null,
        'pixelMetaClickEvent' => null,
        'pixelMetaSearchEvent' => null,
        'type' => null,
        's2sMetaToken' => null,
        's2sMetaPixelId' => null,
        's2sMetaLandingPageEvent' => null,
        's2sMetaClickEvent' => null,
        's2sMetaSearchEvent' => null,
        's2sOutbrainClickParam' => null,
        's2sOutbrainLandingPageEvent' => null,
        's2sOutbrainSearchEvent' => null,
        's2sOutbrainClickEvent' => null,
        's2sSnapchatToken' => null,
        's2sSnapchatPixelId' => null,
        's2sSnapchatLandingPageEvent' => null,
        's2sSnapchatSearchEvent' => null,
        's2sSnapchatClickEvent' => null,
        's2sTaboolaClickParam' => null,
        's2sTaboolaLandingPageEvent' => null,
        's2sTaboolaSearchEvent' => null,
        's2sTaboolaClickEvent' => null,
        's2sTikTokToken' => null,
        's2sTikTokPixelId' => null,
        's2sTikTokLandingPageEvent' => null,
        's2sTikTokSearchEvent' => null,
        's2sTikTokClickEvent' => null,
        's2sXPixelId' => null,
        's2sXLandingPageEvent' => null,
        's2sXSearchEvent' => null,
        's2sXClickEvent' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'pixelMetaPixelId' => false,
        'pixelMetaLandingPageEvent' => false,
        'pixelMetaClickEvent' => false,
        'pixelMetaSearchEvent' => false,
        'type' => false,
        's2sMetaToken' => false,
        's2sMetaPixelId' => false,
        's2sMetaLandingPageEvent' => false,
        's2sMetaClickEvent' => false,
        's2sMetaSearchEvent' => false,
        's2sOutbrainClickParam' => false,
        's2sOutbrainLandingPageEvent' => false,
        's2sOutbrainSearchEvent' => false,
        's2sOutbrainClickEvent' => false,
        's2sSnapchatToken' => false,
        's2sSnapchatPixelId' => false,
        's2sSnapchatLandingPageEvent' => false,
        's2sSnapchatSearchEvent' => false,
        's2sSnapchatClickEvent' => false,
        's2sTaboolaClickParam' => false,
        's2sTaboolaLandingPageEvent' => false,
        's2sTaboolaSearchEvent' => false,
        's2sTaboolaClickEvent' => false,
        's2sTikTokToken' => false,
        's2sTikTokPixelId' => false,
        's2sTikTokLandingPageEvent' => false,
        's2sTikTokSearchEvent' => false,
        's2sTikTokClickEvent' => false,
        's2sXPixelId' => false,
        's2sXLandingPageEvent' => false,
        's2sXSearchEvent' => false,
        's2sXClickEvent' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pixelMetaPixelId' => 'pixelMetaPixelId',
        'pixelMetaLandingPageEvent' => 'pixelMetaLandingPageEvent',
        'pixelMetaClickEvent' => 'pixelMetaClickEvent',
        'pixelMetaSearchEvent' => 'pixelMetaSearchEvent',
        'type' => 'type',
        's2sMetaToken' => 's2sMetaToken',
        's2sMetaPixelId' => 's2sMetaPixelId',
        's2sMetaLandingPageEvent' => 's2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 's2sMetaClickEvent',
        's2sMetaSearchEvent' => 's2sMetaSearchEvent',
        's2sOutbrainClickParam' => 's2sOutbrainClickParam',
        's2sOutbrainLandingPageEvent' => 's2sOutbrainLandingPageEvent',
        's2sOutbrainSearchEvent' => 's2sOutbrainSearchEvent',
        's2sOutbrainClickEvent' => 's2sOutbrainClickEvent',
        's2sSnapchatToken' => 's2sSnapchatToken',
        's2sSnapchatPixelId' => 's2sSnapchatPixelId',
        's2sSnapchatLandingPageEvent' => 's2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 's2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 's2sSnapchatClickEvent',
        's2sTaboolaClickParam' => 's2sTaboolaClickParam',
        's2sTaboolaLandingPageEvent' => 's2sTaboolaLandingPageEvent',
        's2sTaboolaSearchEvent' => 's2sTaboolaSearchEvent',
        's2sTaboolaClickEvent' => 's2sTaboolaClickEvent',
        's2sTikTokToken' => 's2sTikTokToken',
        's2sTikTokPixelId' => 's2sTikTokPixelId',
        's2sTikTokLandingPageEvent' => 's2sTikTokLandingPageEvent',
        's2sTikTokSearchEvent' => 's2sTikTokSearchEvent',
        's2sTikTokClickEvent' => 's2sTikTokClickEvent',
        's2sXPixelId' => 's2sXPixelId',
        's2sXLandingPageEvent' => 's2sXLandingPageEvent',
        's2sXSearchEvent' => 's2sXSearchEvent',
        's2sXClickEvent' => 's2sXClickEvent',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'pixelMetaPixelId' => 'setPixelMetaPixelId',
        'pixelMetaLandingPageEvent' => 'setPixelMetaLandingPageEvent',
        'pixelMetaClickEvent' => 'setPixelMetaClickEvent',
        'pixelMetaSearchEvent' => 'setPixelMetaSearchEvent',
        'type' => 'setType',
        's2sMetaToken' => 'setS2sMetaToken',
        's2sMetaPixelId' => 'setS2sMetaPixelId',
        's2sMetaLandingPageEvent' => 'setS2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 'setS2sMetaClickEvent',
        's2sMetaSearchEvent' => 'setS2sMetaSearchEvent',
        's2sOutbrainClickParam' => 'setS2sOutbrainClickParam',
        's2sOutbrainLandingPageEvent' => 'setS2sOutbrainLandingPageEvent',
        's2sOutbrainSearchEvent' => 'setS2sOutbrainSearchEvent',
        's2sOutbrainClickEvent' => 'setS2sOutbrainClickEvent',
        's2sSnapchatToken' => 'setS2sSnapchatToken',
        's2sSnapchatPixelId' => 'setS2sSnapchatPixelId',
        's2sSnapchatLandingPageEvent' => 'setS2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 'setS2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 'setS2sSnapchatClickEvent',
        's2sTaboolaClickParam' => 'setS2sTaboolaClickParam',
        's2sTaboolaLandingPageEvent' => 'setS2sTaboolaLandingPageEvent',
        's2sTaboolaSearchEvent' => 'setS2sTaboolaSearchEvent',
        's2sTaboolaClickEvent' => 'setS2sTaboolaClickEvent',
        's2sTikTokToken' => 'setS2sTikTokToken',
        's2sTikTokPixelId' => 'setS2sTikTokPixelId',
        's2sTikTokLandingPageEvent' => 'setS2sTikTokLandingPageEvent',
        's2sTikTokSearchEvent' => 'setS2sTikTokSearchEvent',
        's2sTikTokClickEvent' => 'setS2sTikTokClickEvent',
        's2sXPixelId' => 'setS2sXPixelId',
        's2sXLandingPageEvent' => 'setS2sXLandingPageEvent',
        's2sXSearchEvent' => 'setS2sXSearchEvent',
        's2sXClickEvent' => 'setS2sXClickEvent',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'pixelMetaPixelId' => 'getPixelMetaPixelId',
        'pixelMetaLandingPageEvent' => 'getPixelMetaLandingPageEvent',
        'pixelMetaClickEvent' => 'getPixelMetaClickEvent',
        'pixelMetaSearchEvent' => 'getPixelMetaSearchEvent',
        'type' => 'getType',
        's2sMetaToken' => 'getS2sMetaToken',
        's2sMetaPixelId' => 'getS2sMetaPixelId',
        's2sMetaLandingPageEvent' => 'getS2sMetaLandingPageEvent',
        's2sMetaClickEvent' => 'getS2sMetaClickEvent',
        's2sMetaSearchEvent' => 'getS2sMetaSearchEvent',
        's2sOutbrainClickParam' => 'getS2sOutbrainClickParam',
        's2sOutbrainLandingPageEvent' => 'getS2sOutbrainLandingPageEvent',
        's2sOutbrainSearchEvent' => 'getS2sOutbrainSearchEvent',
        's2sOutbrainClickEvent' => 'getS2sOutbrainClickEvent',
        's2sSnapchatToken' => 'getS2sSnapchatToken',
        's2sSnapchatPixelId' => 'getS2sSnapchatPixelId',
        's2sSnapchatLandingPageEvent' => 'getS2sSnapchatLandingPageEvent',
        's2sSnapchatSearchEvent' => 'getS2sSnapchatSearchEvent',
        's2sSnapchatClickEvent' => 'getS2sSnapchatClickEvent',
        's2sTaboolaClickParam' => 'getS2sTaboolaClickParam',
        's2sTaboolaLandingPageEvent' => 'getS2sTaboolaLandingPageEvent',
        's2sTaboolaSearchEvent' => 'getS2sTaboolaSearchEvent',
        's2sTaboolaClickEvent' => 'getS2sTaboolaClickEvent',
        's2sTikTokToken' => 'getS2sTikTokToken',
        's2sTikTokPixelId' => 'getS2sTikTokPixelId',
        's2sTikTokLandingPageEvent' => 'getS2sTikTokLandingPageEvent',
        's2sTikTokSearchEvent' => 'getS2sTikTokSearchEvent',
        's2sTikTokClickEvent' => 'getS2sTikTokClickEvent',
        's2sXPixelId' => 'getS2sXPixelId',
        's2sXLandingPageEvent' => 'getS2sXLandingPageEvent',
        's2sXSearchEvent' => 'getS2sXSearchEvent',
        's2sXClickEvent' => 'getS2sXClickEvent',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[]|null $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pixelMetaPixelId', $data ?? [], null);
        $this->setIfExists('pixelMetaLandingPageEvent', $data ?? [], null);
        $this->setIfExists('pixelMetaClickEvent', $data ?? [], null);
        $this->setIfExists('pixelMetaSearchEvent', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('s2sMetaToken', $data ?? [], null);
        $this->setIfExists('s2sMetaPixelId', $data ?? [], null);
        $this->setIfExists('s2sMetaLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sMetaClickEvent', $data ?? [], null);
        $this->setIfExists('s2sMetaSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sOutbrainClickParam', $data ?? [], null);
        $this->setIfExists('s2sOutbrainLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sOutbrainSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sOutbrainClickEvent', $data ?? [], null);
        $this->setIfExists('s2sSnapchatToken', $data ?? [], null);
        $this->setIfExists('s2sSnapchatPixelId', $data ?? [], null);
        $this->setIfExists('s2sSnapchatLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sSnapchatSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sSnapchatClickEvent', $data ?? [], null);
        $this->setIfExists('s2sTaboolaClickParam', $data ?? [], null);
        $this->setIfExists('s2sTaboolaLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sTaboolaSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sTaboolaClickEvent', $data ?? [], null);
        $this->setIfExists('s2sTikTokToken', $data ?? [], null);
        $this->setIfExists('s2sTikTokPixelId', $data ?? [], null);
        $this->setIfExists('s2sTikTokLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sTikTokSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sTikTokClickEvent', $data ?? [], null);
        $this->setIfExists('s2sXPixelId', $data ?? [], null);
        $this->setIfExists('s2sXLandingPageEvent', $data ?? [], null);
        $this->setIfExists('s2sXSearchEvent', $data ?? [], null);
        $this->setIfExists('s2sXClickEvent', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['pixelMetaPixelId']) {
            $invalidProperties[] = "'pixelMetaPixelId' can't be null";
        }
        if (mb_strlen($this->container['pixelMetaPixelId']) < 1) {
            $invalidProperties[] = "invalid value for 'pixelMetaPixelId', the character length must be bigger than or equal to 1.";
        }

        if (null === $this->container['type']) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (null === $this->container['s2sOutbrainClickParam']) {
            $invalidProperties[] = "'s2sOutbrainClickParam' can't be null";
        }
        if (null === $this->container['s2sSnapchatToken']) {
            $invalidProperties[] = "'s2sSnapchatToken' can't be null";
        }
        if (null === $this->container['s2sSnapchatPixelId']) {
            $invalidProperties[] = "'s2sSnapchatPixelId' can't be null";
        }
        if (null === $this->container['s2sTaboolaClickParam']) {
            $invalidProperties[] = "'s2sTaboolaClickParam' can't be null";
        }
        if (null === $this->container['s2sTikTokToken']) {
            $invalidProperties[] = "'s2sTikTokToken' can't be null";
        }
        if (null === $this->container['s2sTikTokPixelId']) {
            $invalidProperties[] = "'s2sTikTokPixelId' can't be null";
        }
        if (null === $this->container['s2sXPixelId']) {
            $invalidProperties[] = "'s2sXPixelId' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets pixelMetaPixelId.
     *
     * @return string
     */
    public function getPixelMetaPixelId()
    {
        return $this->container['pixelMetaPixelId'];
    }

    /**
     * Sets pixelMetaPixelId.
     *
     * @param string $pixelMetaPixelId Pixel ID from Meta Events Manager. See for more details: https://www.facebook.com/business/help/952192354843755?id=1205376682832142  More details on how to set up the tracking can be found in the [Meta conversion tracking API documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/get-started/)
     *
     * @return self
     */
    public function setPixelMetaPixelId($pixelMetaPixelId)
    {
        if (is_null($pixelMetaPixelId)) {
            throw new \InvalidArgumentException('non-nullable pixelMetaPixelId cannot be null');
        }

        if (mb_strlen($pixelMetaPixelId) < 1) {
            throw new \InvalidArgumentException('invalid length for $pixelMetaPixelId when calling CampaignDataTrackingDataTrackingSettings., must be bigger than or equal to 1.');
        }

        $this->container['pixelMetaPixelId'] = $pixelMetaPixelId;

        return $this;
    }

    /**
     * Gets pixelMetaLandingPageEvent.
     *
     * @return string|null
     */
    public function getPixelMetaLandingPageEvent()
    {
        return $this->container['pixelMetaLandingPageEvent'];
    }

    /**
     * Sets pixelMetaLandingPageEvent.
     *
     * @param string|null $pixelMetaLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setPixelMetaLandingPageEvent($pixelMetaLandingPageEvent)
    {
        if (is_null($pixelMetaLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable pixelMetaLandingPageEvent cannot be null');
        }
        $this->container['pixelMetaLandingPageEvent'] = $pixelMetaLandingPageEvent;

        return $this;
    }

    /**
     * Gets pixelMetaClickEvent.
     *
     * @return string|null
     */
    public function getPixelMetaClickEvent()
    {
        return $this->container['pixelMetaClickEvent'];
    }

    /**
     * Sets pixelMetaClickEvent.
     *
     * @param string|null $pixelMetaClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setPixelMetaClickEvent($pixelMetaClickEvent)
    {
        if (is_null($pixelMetaClickEvent)) {
            throw new \InvalidArgumentException('non-nullable pixelMetaClickEvent cannot be null');
        }
        $this->container['pixelMetaClickEvent'] = $pixelMetaClickEvent;

        return $this;
    }

    /**
     * Gets pixelMetaSearchEvent.
     *
     * @return string|null
     */
    public function getPixelMetaSearchEvent()
    {
        return $this->container['pixelMetaSearchEvent'];
    }

    /**
     * Sets pixelMetaSearchEvent.
     *
     * @param string|null $pixelMetaSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setPixelMetaSearchEvent($pixelMetaSearchEvent)
    {
        if (is_null($pixelMetaSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable pixelMetaSearchEvent cannot be null');
        }
        $this->container['pixelMetaSearchEvent'] = $pixelMetaSearchEvent;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets s2sMetaToken.
     *
     * @return string|null
     */
    public function getS2sMetaToken()
    {
        return $this->container['s2sMetaToken'];
    }

    /**
     * Sets s2sMetaToken.
     *
     * @param string|null $s2sMetaToken Conversion API token
     *
     * @return self
     */
    public function setS2sMetaToken($s2sMetaToken)
    {
        if (is_null($s2sMetaToken)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaToken cannot be null');
        }
        $this->container['s2sMetaToken'] = $s2sMetaToken;

        return $this;
    }

    /**
     * Gets s2sMetaPixelId.
     *
     * @return string|null
     */
    public function getS2sMetaPixelId()
    {
        return $this->container['s2sMetaPixelId'];
    }

    /**
     * Sets s2sMetaPixelId.
     *
     * @param string|null $s2sMetaPixelId Pixel ID from Meta Events Manager. See for more details: https://www.facebook.com/business/help/952192354843755?id=1205376682832142  More details on how to set up the tracking can be found in the [Meta conversion tracking API documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/get-started/)
     *
     * @return self
     */
    public function setS2sMetaPixelId($s2sMetaPixelId)
    {
        if (is_null($s2sMetaPixelId)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaPixelId cannot be null');
        }
        $this->container['s2sMetaPixelId'] = $s2sMetaPixelId;

        return $this;
    }

    /**
     * Gets s2sMetaLandingPageEvent.
     *
     * @return string|null
     */
    public function getS2sMetaLandingPageEvent()
    {
        return $this->container['s2sMetaLandingPageEvent'];
    }

    /**
     * Sets s2sMetaLandingPageEvent.
     *
     * @param string|null $s2sMetaLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sMetaLandingPageEvent($s2sMetaLandingPageEvent)
    {
        if (is_null($s2sMetaLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaLandingPageEvent cannot be null');
        }
        $this->container['s2sMetaLandingPageEvent'] = $s2sMetaLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sMetaClickEvent.
     *
     * @return string|null
     */
    public function getS2sMetaClickEvent()
    {
        return $this->container['s2sMetaClickEvent'];
    }

    /**
     * Sets s2sMetaClickEvent.
     *
     * @param string|null $s2sMetaClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sMetaClickEvent($s2sMetaClickEvent)
    {
        if (is_null($s2sMetaClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaClickEvent cannot be null');
        }
        $this->container['s2sMetaClickEvent'] = $s2sMetaClickEvent;

        return $this;
    }

    /**
     * Gets s2sMetaSearchEvent.
     *
     * @return string|null
     */
    public function getS2sMetaSearchEvent()
    {
        return $this->container['s2sMetaSearchEvent'];
    }

    /**
     * Sets s2sMetaSearchEvent.
     *
     * @param string|null $s2sMetaSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sMetaSearchEvent($s2sMetaSearchEvent)
    {
        if (is_null($s2sMetaSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sMetaSearchEvent cannot be null');
        }
        $this->container['s2sMetaSearchEvent'] = $s2sMetaSearchEvent;

        return $this;
    }

    /**
     * Gets s2sOutbrainClickParam.
     *
     * @return string
     */
    public function getS2sOutbrainClickParam()
    {
        return $this->container['s2sOutbrainClickParam'];
    }

    /**
     * Sets s2sOutbrainClickParam.
     *
     * @param string $s2sOutbrainClickParam Follow the Outbrain guidelines to set up the Server-to-Server (S2S) Conversion in your Outbrain account: [Outbrain S2S Conversion Setup](https://www.outbrain.com/help/advertisers/server2server-integrations/)  This parameter is crucial for passing the Outbrain Click ID back to Outbrain, enabling effective tracking of your campaigns.  **Usage Instructions:**   1. When directing traffic to your RSoC articles, include the Outbrain Click ID in the URL using a parameter name of your choice.   2. Ensure that the parameter name in the URL aligns with the name configured in s2sObClickParam.  **Example:**  If your traffic URL is structured as follows: `https://your-rsoc-domain.com/?campaign=1234&ob_click_id=23o4ij23o` Then, you should set the value of s2sTblClickParam to `ob_click_id`. This alignment guarantees proper tracking and reporting of your campaigns with Outbrain.
     *
     * @return self
     */
    public function setS2sOutbrainClickParam($s2sOutbrainClickParam)
    {
        if (is_null($s2sOutbrainClickParam)) {
            throw new \InvalidArgumentException('non-nullable s2sOutbrainClickParam cannot be null');
        }
        $this->container['s2sOutbrainClickParam'] = $s2sOutbrainClickParam;

        return $this;
    }

    /**
     * Gets s2sOutbrainLandingPageEvent.
     *
     * @return string|null
     */
    public function getS2sOutbrainLandingPageEvent()
    {
        return $this->container['s2sOutbrainLandingPageEvent'];
    }

    /**
     * Sets s2sOutbrainLandingPageEvent.
     *
     * @param string|null $s2sOutbrainLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sOutbrainLandingPageEvent($s2sOutbrainLandingPageEvent)
    {
        if (is_null($s2sOutbrainLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sOutbrainLandingPageEvent cannot be null');
        }
        $this->container['s2sOutbrainLandingPageEvent'] = $s2sOutbrainLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sOutbrainSearchEvent.
     *
     * @return string|null
     */
    public function getS2sOutbrainSearchEvent()
    {
        return $this->container['s2sOutbrainSearchEvent'];
    }

    /**
     * Sets s2sOutbrainSearchEvent.
     *
     * @param string|null $s2sOutbrainSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sOutbrainSearchEvent($s2sOutbrainSearchEvent)
    {
        if (is_null($s2sOutbrainSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sOutbrainSearchEvent cannot be null');
        }
        $this->container['s2sOutbrainSearchEvent'] = $s2sOutbrainSearchEvent;

        return $this;
    }

    /**
     * Gets s2sOutbrainClickEvent.
     *
     * @return string|null
     */
    public function getS2sOutbrainClickEvent()
    {
        return $this->container['s2sOutbrainClickEvent'];
    }

    /**
     * Sets s2sOutbrainClickEvent.
     *
     * @param string|null $s2sOutbrainClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sOutbrainClickEvent($s2sOutbrainClickEvent)
    {
        if (is_null($s2sOutbrainClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sOutbrainClickEvent cannot be null');
        }
        $this->container['s2sOutbrainClickEvent'] = $s2sOutbrainClickEvent;

        return $this;
    }

    /**
     * Gets s2sSnapchatToken.
     *
     * @return string
     */
    public function getS2sSnapchatToken()
    {
        return $this->container['s2sSnapchatToken'];
    }

    /**
     * Sets s2sSnapchatToken.
     *
     * @param string $s2sSnapchatToken Conversion API token
     *
     * @return self
     */
    public function setS2sSnapchatToken($s2sSnapchatToken)
    {
        if (is_null($s2sSnapchatToken)) {
            throw new \InvalidArgumentException('non-nullable s2sSnapchatToken cannot be null');
        }
        $this->container['s2sSnapchatToken'] = $s2sSnapchatToken;

        return $this;
    }

    /**
     * Gets s2sSnapchatPixelId.
     *
     * @return string
     */
    public function getS2sSnapchatPixelId()
    {
        return $this->container['s2sSnapchatPixelId'];
    }

    /**
     * Sets s2sSnapchatPixelId.
     *
     * @param string $s2sSnapchatPixelId Event Pixel ID from Snapchat Ads Manager  More details on how to set up the tracking can be found in the [Snapchat Ads Manager](https://forbusiness.snapchat.com/blog/the-snap-pixel-how-it-works-and-how-to-install-it#installation)
     *
     * @return self
     */
    public function setS2sSnapchatPixelId($s2sSnapchatPixelId)
    {
        if (is_null($s2sSnapchatPixelId)) {
            throw new \InvalidArgumentException('non-nullable s2sSnapchatPixelId cannot be null');
        }
        $this->container['s2sSnapchatPixelId'] = $s2sSnapchatPixelId;

        return $this;
    }

    /**
     * Gets s2sSnapchatLandingPageEvent.
     *
     * @return S2sSnapchatEventType|null
     */
    public function getS2sSnapchatLandingPageEvent()
    {
        return $this->container['s2sSnapchatLandingPageEvent'];
    }

    /**
     * Sets s2sSnapchatLandingPageEvent.
     *
     * @param S2sSnapchatEventType|null $s2sSnapchatLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sSnapchatLandingPageEvent($s2sSnapchatLandingPageEvent)
    {
        if (is_null($s2sSnapchatLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sSnapchatLandingPageEvent cannot be null');
        }
        $this->container['s2sSnapchatLandingPageEvent'] = $s2sSnapchatLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sSnapchatSearchEvent.
     *
     * @return S2sSnapchatEventType|null
     */
    public function getS2sSnapchatSearchEvent()
    {
        return $this->container['s2sSnapchatSearchEvent'];
    }

    /**
     * Sets s2sSnapchatSearchEvent.
     *
     * @param S2sSnapchatEventType|null $s2sSnapchatSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sSnapchatSearchEvent($s2sSnapchatSearchEvent)
    {
        if (is_null($s2sSnapchatSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sSnapchatSearchEvent cannot be null');
        }
        $this->container['s2sSnapchatSearchEvent'] = $s2sSnapchatSearchEvent;

        return $this;
    }

    /**
     * Gets s2sSnapchatClickEvent.
     *
     * @return S2sSnapchatEventType|null
     */
    public function getS2sSnapchatClickEvent()
    {
        return $this->container['s2sSnapchatClickEvent'];
    }

    /**
     * Sets s2sSnapchatClickEvent.
     *
     * @param S2sSnapchatEventType|null $s2sSnapchatClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sSnapchatClickEvent($s2sSnapchatClickEvent)
    {
        if (is_null($s2sSnapchatClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sSnapchatClickEvent cannot be null');
        }
        $this->container['s2sSnapchatClickEvent'] = $s2sSnapchatClickEvent;

        return $this;
    }

    /**
     * Gets s2sTaboolaClickParam.
     *
     * @return string
     */
    public function getS2sTaboolaClickParam()
    {
        return $this->container['s2sTaboolaClickParam'];
    }

    /**
     * Sets s2sTaboolaClickParam.
     *
     * @param string $s2sTaboolaClickParam Follow the Taboola guidelines to set up the Server-to-Server (S2S) Conversion in your Taboola account: [Taboola S2S Conversion Setup0](https://help.taboola.com/hc/en-us/articles/115006850567-How-to-Track-Conversions-Using-Server-to-Server-Integration-S2S)  `s2sTaboolaClickParam` parameter is crucial for passing the Taboola Click ID back to Taboola, enabling effective tracking of your campaigns.  **Usage Instructions:**   1. When directing traffic to your RSoC articles, include the Taboola Click ID in the URL using a parameter name of your choice.   2. Ensure that the parameter name in the URL aligns with the name configured in s2sTaboolaClickParam.  **Example:**    If your traffic URL is structured as follows:   your-rsoc-domain.com/?campaign=12&taboola_click=23o4ij23o   Then, you should set the value of `s2sTaboolaClickParam` to `taboola_click`. This alignment guarantees proper tracking and reporting of your campaigns with Taboola.
     *
     * @return self
     */
    public function setS2sTaboolaClickParam($s2sTaboolaClickParam)
    {
        if (is_null($s2sTaboolaClickParam)) {
            throw new \InvalidArgumentException('non-nullable s2sTaboolaClickParam cannot be null');
        }
        $this->container['s2sTaboolaClickParam'] = $s2sTaboolaClickParam;

        return $this;
    }

    /**
     * Gets s2sTaboolaLandingPageEvent.
     *
     * @return string|null
     */
    public function getS2sTaboolaLandingPageEvent()
    {
        return $this->container['s2sTaboolaLandingPageEvent'];
    }

    /**
     * Sets s2sTaboolaLandingPageEvent.
     *
     * @param string|null $s2sTaboolaLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sTaboolaLandingPageEvent($s2sTaboolaLandingPageEvent)
    {
        if (is_null($s2sTaboolaLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTaboolaLandingPageEvent cannot be null');
        }
        $this->container['s2sTaboolaLandingPageEvent'] = $s2sTaboolaLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sTaboolaSearchEvent.
     *
     * @return string|null
     */
    public function getS2sTaboolaSearchEvent()
    {
        return $this->container['s2sTaboolaSearchEvent'];
    }

    /**
     * Sets s2sTaboolaSearchEvent.
     *
     * @param string|null $s2sTaboolaSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sTaboolaSearchEvent($s2sTaboolaSearchEvent)
    {
        if (is_null($s2sTaboolaSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTaboolaSearchEvent cannot be null');
        }
        $this->container['s2sTaboolaSearchEvent'] = $s2sTaboolaSearchEvent;

        return $this;
    }

    /**
     * Gets s2sTaboolaClickEvent.
     *
     * @return string|null
     */
    public function getS2sTaboolaClickEvent()
    {
        return $this->container['s2sTaboolaClickEvent'];
    }

    /**
     * Sets s2sTaboolaClickEvent.
     *
     * @param string|null $s2sTaboolaClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sTaboolaClickEvent($s2sTaboolaClickEvent)
    {
        if (is_null($s2sTaboolaClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTaboolaClickEvent cannot be null');
        }
        $this->container['s2sTaboolaClickEvent'] = $s2sTaboolaClickEvent;

        return $this;
    }

    /**
     * Gets s2sTikTokToken.
     *
     * @return string
     */
    public function getS2sTikTokToken()
    {
        return $this->container['s2sTikTokToken'];
    }

    /**
     * Sets s2sTikTokToken.
     *
     * @param string $s2sTikTokToken This is the API token required for authentication with the TikTok API. Ensure that you generate and securely store this token to facilitate server-to-server interactions.
     *
     * @return self
     */
    public function setS2sTikTokToken($s2sTikTokToken)
    {
        if (is_null($s2sTikTokToken)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokToken cannot be null');
        }
        $this->container['s2sTikTokToken'] = $s2sTikTokToken;

        return $this;
    }

    /**
     * Gets s2sTikTokPixelId.
     *
     * @return string
     */
    public function getS2sTikTokPixelId()
    {
        return $this->container['s2sTikTokPixelId'];
    }

    /**
     * Sets s2sTikTokPixelId.
     *
     * @param string $s2sTikTokPixelId This is the Event Pixel ID obtained from the TikTok Tracking section. It is essential for tracking user interactions on your landing pages.  For generating your Pixel ID, refer to the following resources:   [Get Started with Pixel](https://ads.tiktok.com/help/article/get-started-pixel)   [Pixel Sharing in Business Center](https://ads.tiktok.com/help/article/pixel-sharing-business-center)  Note: Make sure to configure the appropriate permissions in your TikTok account for the pixel to function correctly.
     *
     * @return self
     */
    public function setS2sTikTokPixelId($s2sTikTokPixelId)
    {
        if (is_null($s2sTikTokPixelId)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokPixelId cannot be null');
        }
        $this->container['s2sTikTokPixelId'] = $s2sTikTokPixelId;

        return $this;
    }

    /**
     * Gets s2sTikTokLandingPageEvent.
     *
     * @return S2sTikTokEventType|null
     */
    public function getS2sTikTokLandingPageEvent()
    {
        return $this->container['s2sTikTokLandingPageEvent'];
    }

    /**
     * Sets s2sTikTokLandingPageEvent.
     *
     * @param S2sTikTokEventType|null $s2sTikTokLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sTikTokLandingPageEvent($s2sTikTokLandingPageEvent)
    {
        if (is_null($s2sTikTokLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokLandingPageEvent cannot be null');
        }
        $this->container['s2sTikTokLandingPageEvent'] = $s2sTikTokLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sTikTokSearchEvent.
     *
     * @return S2sTikTokEventType|null
     */
    public function getS2sTikTokSearchEvent()
    {
        return $this->container['s2sTikTokSearchEvent'];
    }

    /**
     * Sets s2sTikTokSearchEvent.
     *
     * @param S2sTikTokEventType|null $s2sTikTokSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sTikTokSearchEvent($s2sTikTokSearchEvent)
    {
        if (is_null($s2sTikTokSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokSearchEvent cannot be null');
        }
        $this->container['s2sTikTokSearchEvent'] = $s2sTikTokSearchEvent;

        return $this;
    }

    /**
     * Gets s2sTikTokClickEvent.
     *
     * @return S2sTikTokEventType|null
     */
    public function getS2sTikTokClickEvent()
    {
        return $this->container['s2sTikTokClickEvent'];
    }

    /**
     * Sets s2sTikTokClickEvent.
     *
     * @param S2sTikTokEventType|null $s2sTikTokClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sTikTokClickEvent($s2sTikTokClickEvent)
    {
        if (is_null($s2sTikTokClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sTikTokClickEvent cannot be null');
        }
        $this->container['s2sTikTokClickEvent'] = $s2sTikTokClickEvent;

        return $this;
    }

    /**
     * Gets s2sXPixelId.
     *
     * @return string
     */
    public function getS2sXPixelId()
    {
        return $this->container['s2sXPixelId'];
    }

    /**
     * Sets s2sXPixelId.
     *
     * @param string $s2sXPixelId This parameter represents the Event Pixel ID obtained from the Twitter (X) Events Manager. It is essential for tracking user interactions and conversions.  For detailed guidance on setting up and using the pixel, please refer to the official documentation: [Twitter (X) Conversion API](https://developer.x.com/en/docs/x-ads-api/measurement/web-conversions/conversion-api)
     *
     * @return self
     */
    public function setS2sXPixelId($s2sXPixelId)
    {
        if (is_null($s2sXPixelId)) {
            throw new \InvalidArgumentException('non-nullable s2sXPixelId cannot be null');
        }
        $this->container['s2sXPixelId'] = $s2sXPixelId;

        return $this;
    }

    /**
     * Gets s2sXLandingPageEvent.
     *
     * @return string|null
     */
    public function getS2sXLandingPageEvent()
    {
        return $this->container['s2sXLandingPageEvent'];
    }

    /**
     * Sets s2sXLandingPageEvent.
     *
     * @param string|null $s2sXLandingPageEvent Event name for the Landing Visit event
     *
     * @return self
     */
    public function setS2sXLandingPageEvent($s2sXLandingPageEvent)
    {
        if (is_null($s2sXLandingPageEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sXLandingPageEvent cannot be null');
        }
        $this->container['s2sXLandingPageEvent'] = $s2sXLandingPageEvent;

        return $this;
    }

    /**
     * Gets s2sXSearchEvent.
     *
     * @return string|null
     */
    public function getS2sXSearchEvent()
    {
        return $this->container['s2sXSearchEvent'];
    }

    /**
     * Sets s2sXSearchEvent.
     *
     * @param string|null $s2sXSearchEvent Event name for the Search event. Can be used for tracking \"1st\" click
     *
     * @return self
     */
    public function setS2sXSearchEvent($s2sXSearchEvent)
    {
        if (is_null($s2sXSearchEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sXSearchEvent cannot be null');
        }
        $this->container['s2sXSearchEvent'] = $s2sXSearchEvent;

        return $this;
    }

    /**
     * Gets s2sXClickEvent.
     *
     * @return string|null
     */
    public function getS2sXClickEvent()
    {
        return $this->container['s2sXClickEvent'];
    }

    /**
     * Sets s2sXClickEvent.
     *
     * @param string|null $s2sXClickEvent Event name for the Ad Click or \"2nd\" click event. Commonly used for conversion tracking
     *
     * @return self
     */
    public function setS2sXClickEvent($s2sXClickEvent)
    {
        if (is_null($s2sXClickEvent)) {
            throw new \InvalidArgumentException('non-nullable s2sXClickEvent cannot be null');
        }
        $this->container['s2sXClickEvent'] = $s2sXClickEvent;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
