<?php

/**
 * KeywordPerformanceReport.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * platform-api.
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\OpenApi\Platform\Model;

use Sedo\SedoTMP\OpenApi\ObjectSerializer;

/**
 * KeywordPerformanceReport Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class KeywordPerformanceReport implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'KeywordPerformanceReport';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'partner' => 'string',
        'date' => '\DateTime',
        'campaignId' => 'string',
        'campaignName' => 'string',
        'country' => 'string',
        'os' => 'string',
        'browser' => 'string',
        'deviceType' => 'string',
        'deviceBrand' => 'string',
        'keywords' => 'string',
        'clicks' => 'int',
        'searches' => 'int',
        'coverage' => 'int',
        'coveragePercent' => 'float',
        'estimatedRevenue' => 'float',
        'ctr' => 'float',
        'estimatedCpc' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'partner' => null,
        'date' => 'date',
        'campaignId' => null,
        'campaignName' => null,
        'country' => 'iso-3166-alpha-2',
        'os' => null,
        'browser' => null,
        'deviceType' => null,
        'deviceBrand' => null,
        'keywords' => null,
        'clicks' => null,
        'searches' => null,
        'coverage' => null,
        'coveragePercent' => null,
        'estimatedRevenue' => null,
        'ctr' => null,
        'estimatedCpc' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'partner' => false,
        'date' => false,
        'campaignId' => false,
        'campaignName' => false,
        'country' => false,
        'os' => false,
        'browser' => false,
        'deviceType' => false,
        'deviceBrand' => false,
        'keywords' => false,
        'clicks' => false,
        'searches' => false,
        'coverage' => false,
        'coveragePercent' => false,
        'estimatedRevenue' => false,
        'ctr' => false,
        'estimatedCpc' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partner' => 'partner',
        'date' => 'date',
        'campaignId' => 'campaignId',
        'campaignName' => 'campaignName',
        'country' => 'country',
        'os' => 'os',
        'browser' => 'browser',
        'deviceType' => 'deviceType',
        'deviceBrand' => 'deviceBrand',
        'keywords' => 'keywords',
        'clicks' => 'clicks',
        'searches' => 'searches',
        'coverage' => 'coverage',
        'coveragePercent' => 'coveragePercent',
        'estimatedRevenue' => 'estimatedRevenue',
        'ctr' => 'ctr',
        'estimatedCpc' => 'estimatedCpc',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'partner' => 'setPartner',
        'date' => 'setDate',
        'campaignId' => 'setCampaignId',
        'campaignName' => 'setCampaignName',
        'country' => 'setCountry',
        'os' => 'setOs',
        'browser' => 'setBrowser',
        'deviceType' => 'setDeviceType',
        'deviceBrand' => 'setDeviceBrand',
        'keywords' => 'setKeywords',
        'clicks' => 'setClicks',
        'searches' => 'setSearches',
        'coverage' => 'setCoverage',
        'coveragePercent' => 'setCoveragePercent',
        'estimatedRevenue' => 'setEstimatedRevenue',
        'ctr' => 'setCtr',
        'estimatedCpc' => 'setEstimatedCpc',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'partner' => 'getPartner',
        'date' => 'getDate',
        'campaignId' => 'getCampaignId',
        'campaignName' => 'getCampaignName',
        'country' => 'getCountry',
        'os' => 'getOs',
        'browser' => 'getBrowser',
        'deviceType' => 'getDeviceType',
        'deviceBrand' => 'getDeviceBrand',
        'keywords' => 'getKeywords',
        'clicks' => 'getClicks',
        'searches' => 'getSearches',
        'coverage' => 'getCoverage',
        'coveragePercent' => 'getCoveragePercent',
        'estimatedRevenue' => 'getEstimatedRevenue',
        'ctr' => 'getCtr',
        'estimatedCpc' => 'getEstimatedCpc',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[]|null $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('partner', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('campaignId', $data ?? [], null);
        $this->setIfExists('campaignName', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('browser', $data ?? [], null);
        $this->setIfExists('deviceType', $data ?? [], null);
        $this->setIfExists('deviceBrand', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('clicks', $data ?? [], null);
        $this->setIfExists('searches', $data ?? [], null);
        $this->setIfExists('coverage', $data ?? [], null);
        $this->setIfExists('coveragePercent', $data ?? [], null);
        $this->setIfExists('estimatedRevenue', $data ?? [], null);
        $this->setIfExists('ctr', $data ?? [], null);
        $this->setIfExists('estimatedCpc', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets partner.
     *
     * @return string|null
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner.
     *
     * @param string|null $partner Partner assigned to the resource. Requires corresponding privileges
     *
     * @return self
     */
    public function setPartner($partner)
    {
        if (is_null($partner)) {
            throw new \InvalidArgumentException('non-nullable partner cannot be null');
        }
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets date.
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date.
     *
     * @param \DateTime|null $date Date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets campaignId.
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId.
     *
     * @param string|null $campaignId campaignId
     *
     * @return self
     */
    public function setCampaignId($campaignId)
    {
        if (is_null($campaignId)) {
            throw new \InvalidArgumentException('non-nullable campaignId cannot be null');
        }
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets campaignName.
     *
     * @return string|null
     */
    public function getCampaignName()
    {
        return $this->container['campaignName'];
    }

    /**
     * Sets campaignName.
     *
     * @param string|null $campaignName campaignName
     *
     * @return self
     */
    public function setCampaignName($campaignName)
    {
        if (is_null($campaignName)) {
            throw new \InvalidArgumentException('non-nullable campaignName cannot be null');
        }
        $this->container['campaignName'] = $campaignName;

        return $this;
    }

    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country.
     *
     * @param string|null $country Audience country (ISO code)
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if (mb_strlen($country) > 2) {
            throw new \InvalidArgumentException('invalid length for $country when calling KeywordPerformanceReport., must be smaller than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets os.
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os.
     *
     * @param string|null $os The operating system of the browser
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets browser.
     *
     * @return string|null
     */
    public function getBrowser()
    {
        return $this->container['browser'];
    }

    /**
     * Sets browser.
     *
     * @param string|null $browser browser
     *
     * @return self
     */
    public function setBrowser($browser)
    {
        if (is_null($browser)) {
            throw new \InvalidArgumentException('non-nullable browser cannot be null');
        }
        $this->container['browser'] = $browser;

        return $this;
    }

    /**
     * Gets deviceType.
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['deviceType'];
    }

    /**
     * Sets deviceType.
     *
     * @param string|null $deviceType deviceType
     *
     * @return self
     */
    public function setDeviceType($deviceType)
    {
        if (is_null($deviceType)) {
            throw new \InvalidArgumentException('non-nullable deviceType cannot be null');
        }
        $this->container['deviceType'] = $deviceType;

        return $this;
    }

    /**
     * Gets deviceBrand.
     *
     * @return string|null
     */
    public function getDeviceBrand()
    {
        return $this->container['deviceBrand'];
    }

    /**
     * Sets deviceBrand.
     *
     * @param string|null $deviceBrand deviceBrand
     *
     * @return self
     */
    public function setDeviceBrand($deviceBrand)
    {
        if (is_null($deviceBrand)) {
            throw new \InvalidArgumentException('non-nullable deviceBrand cannot be null');
        }
        $this->container['deviceBrand'] = $deviceBrand;

        return $this;
    }

    /**
     * Gets keywords.
     *
     * @return string|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords.
     *
     * @param string|null $keywords keywords
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            throw new \InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets clicks.
     *
     * @return int|null
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks.
     *
     * @param int|null $clicks The number of times the keyword was clicked
     *
     * @return self
     */
    public function setClicks($clicks)
    {
        if (is_null($clicks)) {
            throw new \InvalidArgumentException('non-nullable clicks cannot be null');
        }
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets searches.
     *
     * @return int|null
     */
    public function getSearches()
    {
        return $this->container['searches'];
    }

    /**
     * Sets searches.
     *
     * @param int|null $searches The number of times the keyword was queried or clicked on the landing page
     *
     * @return self
     */
    public function setSearches($searches)
    {
        if (is_null($searches)) {
            throw new \InvalidArgumentException('non-nullable searches cannot be null');
        }
        $this->container['searches'] = $searches;

        return $this;
    }

    /**
     * Gets coverage.
     *
     * @return int|null
     */
    public function getCoverage()
    {
        return $this->container['coverage'];
    }

    /**
     * Sets coverage.
     *
     * @param int|null $coverage The number of times at least one ad was displayed for a keyword during search loads
     *
     * @return self
     */
    public function setCoverage($coverage)
    {
        if (is_null($coverage)) {
            throw new \InvalidArgumentException('non-nullable coverage cannot be null');
        }
        $this->container['coverage'] = $coverage;

        return $this;
    }

    /**
     * Gets coveragePercent.
     *
     * @return float|null
     */
    public function getCoveragePercent()
    {
        return $this->container['coveragePercent'];
    }

    /**
     * Sets coveragePercent.
     *
     * @param float|null $coveragePercent The proportion of keyword searches that resulted in at least one ad being displayed, highlighting ad visibility for each query
     *
     * @return self
     */
    public function setCoveragePercent($coveragePercent)
    {
        if (is_null($coveragePercent)) {
            throw new \InvalidArgumentException('non-nullable coveragePercent cannot be null');
        }
        $this->container['coveragePercent'] = $coveragePercent;

        return $this;
    }

    /**
     * Gets estimatedRevenue.
     *
     * @return float|null
     */
    public function getEstimatedRevenue()
    {
        return $this->container['estimatedRevenue'];
    }

    /**
     * Sets estimatedRevenue.
     *
     * @param float|null $estimatedRevenue The total estimated revenue generated by the keyword within the selected date range and dimensions. Note that the estimated revenue can differ from the final revenue. We recommend to consider final revenue from the campaign report.
     *
     * @return self
     */
    public function setEstimatedRevenue($estimatedRevenue)
    {
        if (is_null($estimatedRevenue)) {
            throw new \InvalidArgumentException('non-nullable estimatedRevenue cannot be null');
        }
        $this->container['estimatedRevenue'] = $estimatedRevenue;

        return $this;
    }

    /**
     * Gets ctr.
     *
     * @return float|null
     */
    public function getCtr()
    {
        return $this->container['ctr'];
    }

    /**
     * Sets ctr.
     *
     * @param float|null $ctr Click-through rate. The percentage of search instances that resulted in an ad click for the keyword
     *
     * @return self
     */
    public function setCtr($ctr)
    {
        if (is_null($ctr)) {
            throw new \InvalidArgumentException('non-nullable ctr cannot be null');
        }
        $this->container['ctr'] = $ctr;

        return $this;
    }

    /**
     * Gets estimatedCpc.
     *
     * @return float|null
     */
    public function getEstimatedCpc()
    {
        return $this->container['estimatedCpc'];
    }

    /**
     * Sets estimatedCpc.
     *
     * @param float|null $estimatedCpc The average estimated cost per click for a keyword, calculated by dividing the estimated revenue by the number of clicks
     *
     * @return self
     */
    public function setEstimatedCpc($estimatedCpc)
    {
        if (is_null($estimatedCpc)) {
            throw new \InvalidArgumentException('non-nullable estimatedCpc cannot be null');
        }
        $this->container['estimatedCpc'] = $estimatedCpc;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
