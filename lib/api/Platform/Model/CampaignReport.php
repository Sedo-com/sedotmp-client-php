<?php

/**
 * CampaignReport.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * platform-api.
 *
 * # Introduction and Process Overview  This API helps manage content campaigns, reporting and other parts of Sedo Traffic Monetization Platform  *Note: Please note that the API is still in development and some endpoints may not be available yet.*  # Authentication The API uses a modern OAuth authentication process to ensure security without sacrificing simplicity. To access the API, you need an access token. For more details on authentication, please refer to the [Introduction](/cms/docs-api/introduction) section.  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sedo\SedoTMP\OpenApi\Platform\Model;

use Sedo\SedoTMP\OpenApi\ObjectSerializer;

/**
 * CampaignReport Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class CampaignReport implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'CampaignReport';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'partner' => 'string',
        'date' => '\DateTime',
        'hour' => 'int',
        'campaignId' => 'string',
        'campaignName' => 'string',
        'country' => 'string',
        'deviceType' => 'string',
        'relatedLinksRequests' => 'int',
        'relatedLinksImpressions' => 'int',
        'relatedLinksClicks' => 'int',
        'relatedLinksRpm' => 'float',
        'adRequests' => 'int',
        'matchedAdRequests' => 'int',
        'adImpressions' => 'int',
        'impressions' => 'int',
        'clicks' => 'int',
        'ctr' => 'float',
        'adCtr' => 'float',
        'cpc' => 'float',
        'adRpm' => 'float',
        'conversionRate' => 'float',
        'revenue' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'partner' => null,
        'date' => 'date',
        'hour' => null,
        'campaignId' => null,
        'campaignName' => null,
        'country' => 'iso-3166-alpha-2',
        'deviceType' => null,
        'relatedLinksRequests' => null,
        'relatedLinksImpressions' => null,
        'relatedLinksClicks' => null,
        'relatedLinksRpm' => null,
        'adRequests' => null,
        'matchedAdRequests' => null,
        'adImpressions' => null,
        'impressions' => null,
        'clicks' => null,
        'ctr' => null,
        'adCtr' => null,
        'cpc' => null,
        'adRpm' => null,
        'conversionRate' => null,
        'revenue' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'partner' => false,
        'date' => false,
        'hour' => false,
        'campaignId' => false,
        'campaignName' => false,
        'country' => false,
        'deviceType' => false,
        'relatedLinksRequests' => false,
        'relatedLinksImpressions' => false,
        'relatedLinksClicks' => false,
        'relatedLinksRpm' => false,
        'adRequests' => false,
        'matchedAdRequests' => false,
        'adImpressions' => false,
        'impressions' => false,
        'clicks' => false,
        'ctr' => false,
        'adCtr' => false,
        'cpc' => false,
        'adRpm' => false,
        'conversionRate' => false,
        'revenue' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partner' => 'partner',
        'date' => 'date',
        'hour' => 'hour',
        'campaignId' => 'campaignId',
        'campaignName' => 'campaignName',
        'country' => 'country',
        'deviceType' => 'deviceType',
        'relatedLinksRequests' => 'relatedLinksRequests',
        'relatedLinksImpressions' => 'relatedLinksImpressions',
        'relatedLinksClicks' => 'relatedLinksClicks',
        'relatedLinksRpm' => 'relatedLinksRpm',
        'adRequests' => 'adRequests',
        'matchedAdRequests' => 'matchedAdRequests',
        'adImpressions' => 'adImpressions',
        'impressions' => 'impressions',
        'clicks' => 'clicks',
        'ctr' => 'ctr',
        'adCtr' => 'adCtr',
        'cpc' => 'cpc',
        'adRpm' => 'adRpm',
        'conversionRate' => 'conversionRate',
        'revenue' => 'revenue',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'partner' => 'setPartner',
        'date' => 'setDate',
        'hour' => 'setHour',
        'campaignId' => 'setCampaignId',
        'campaignName' => 'setCampaignName',
        'country' => 'setCountry',
        'deviceType' => 'setDeviceType',
        'relatedLinksRequests' => 'setRelatedLinksRequests',
        'relatedLinksImpressions' => 'setRelatedLinksImpressions',
        'relatedLinksClicks' => 'setRelatedLinksClicks',
        'relatedLinksRpm' => 'setRelatedLinksRpm',
        'adRequests' => 'setAdRequests',
        'matchedAdRequests' => 'setMatchedAdRequests',
        'adImpressions' => 'setAdImpressions',
        'impressions' => 'setImpressions',
        'clicks' => 'setClicks',
        'ctr' => 'setCtr',
        'adCtr' => 'setAdCtr',
        'cpc' => 'setCpc',
        'adRpm' => 'setAdRpm',
        'conversionRate' => 'setConversionRate',
        'revenue' => 'setRevenue',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'partner' => 'getPartner',
        'date' => 'getDate',
        'hour' => 'getHour',
        'campaignId' => 'getCampaignId',
        'campaignName' => 'getCampaignName',
        'country' => 'getCountry',
        'deviceType' => 'getDeviceType',
        'relatedLinksRequests' => 'getRelatedLinksRequests',
        'relatedLinksImpressions' => 'getRelatedLinksImpressions',
        'relatedLinksClicks' => 'getRelatedLinksClicks',
        'relatedLinksRpm' => 'getRelatedLinksRpm',
        'adRequests' => 'getAdRequests',
        'matchedAdRequests' => 'getMatchedAdRequests',
        'adImpressions' => 'getAdImpressions',
        'impressions' => 'getImpressions',
        'clicks' => 'getClicks',
        'ctr' => 'getCtr',
        'adCtr' => 'getAdCtr',
        'cpc' => 'getCpc',
        'adRpm' => 'getAdRpm',
        'conversionRate' => 'getConversionRate',
        'revenue' => 'getRevenue',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[]|null $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('partner', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('hour', $data ?? [], null);
        $this->setIfExists('campaignId', $data ?? [], null);
        $this->setIfExists('campaignName', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('deviceType', $data ?? [], null);
        $this->setIfExists('relatedLinksRequests', $data ?? [], null);
        $this->setIfExists('relatedLinksImpressions', $data ?? [], null);
        $this->setIfExists('relatedLinksClicks', $data ?? [], null);
        $this->setIfExists('relatedLinksRpm', $data ?? [], null);
        $this->setIfExists('adRequests', $data ?? [], null);
        $this->setIfExists('matchedAdRequests', $data ?? [], null);
        $this->setIfExists('adImpressions', $data ?? [], null);
        $this->setIfExists('impressions', $data ?? [], null);
        $this->setIfExists('clicks', $data ?? [], null);
        $this->setIfExists('ctr', $data ?? [], null);
        $this->setIfExists('adCtr', $data ?? [], null);
        $this->setIfExists('cpc', $data ?? [], null);
        $this->setIfExists('adRpm', $data ?? [], null);
        $this->setIfExists('conversionRate', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hour']) && ($this->container['hour'] > 23)) {
            $invalidProperties[] = "invalid value for 'hour', must be smaller than or equal to 23.";
        }

        if (!is_null($this->container['hour']) && ($this->container['hour'] < 0)) {
            $invalidProperties[] = "invalid value for 'hour', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets partner.
     *
     * @return string|null
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner.
     *
     * @param string|null $partner Partner assigned to the resource. Requires corresponding privileges
     *
     * @return self
     */
    public function setPartner($partner)
    {
        if (is_null($partner)) {
            throw new \InvalidArgumentException('non-nullable partner cannot be null');
        }
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets date.
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date.
     *
     * @param \DateTime|null $date Date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hour.
     *
     * @return int|null
     */
    public function getHour()
    {
        return $this->container['hour'];
    }

    /**
     * Sets hour.
     *
     * @param int|null $hour hour
     *
     * @return self
     */
    public function setHour($hour)
    {
        if (is_null($hour)) {
            throw new \InvalidArgumentException('non-nullable hour cannot be null');
        }

        if ($hour > 23) {
            throw new \InvalidArgumentException('invalid value for $hour when calling CampaignReport., must be smaller than or equal to 23.');
        }
        if ($hour < 0) {
            throw new \InvalidArgumentException('invalid value for $hour when calling CampaignReport., must be bigger than or equal to 0.');
        }

        $this->container['hour'] = $hour;

        return $this;
    }

    /**
     * Gets campaignId.
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId.
     *
     * @param string|null $campaignId campaignId
     *
     * @return self
     */
    public function setCampaignId($campaignId)
    {
        if (is_null($campaignId)) {
            throw new \InvalidArgumentException('non-nullable campaignId cannot be null');
        }
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets campaignName.
     *
     * @return string|null
     */
    public function getCampaignName()
    {
        return $this->container['campaignName'];
    }

    /**
     * Sets campaignName.
     *
     * @param string|null $campaignName campaignName
     *
     * @return self
     */
    public function setCampaignName($campaignName)
    {
        if (is_null($campaignName)) {
            throw new \InvalidArgumentException('non-nullable campaignName cannot be null');
        }
        $this->container['campaignName'] = $campaignName;

        return $this;
    }

    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country.
     *
     * @param string|null $country Audience country (ISO code)
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if (mb_strlen($country) > 2) {
            throw new \InvalidArgumentException('invalid length for $country when calling CampaignReport., must be smaller than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets deviceType.
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['deviceType'];
    }

    /**
     * Sets deviceType.
     *
     * @param string|null $deviceType deviceType
     *
     * @return self
     */
    public function setDeviceType($deviceType)
    {
        if (is_null($deviceType)) {
            throw new \InvalidArgumentException('non-nullable deviceType cannot be null');
        }
        $this->container['deviceType'] = $deviceType;

        return $this;
    }

    /**
     * Gets relatedLinksRequests.
     *
     * @return int|null
     */
    public function getRelatedLinksRequests()
    {
        return $this->container['relatedLinksRequests'];
    }

    /**
     * Sets relatedLinksRequests.
     *
     * @param int|null $relatedLinksRequests A funnel request is counted whenever your site requests to display a non-ad unit (for example, a related search unit). We report a funnel request each time a request was sent, even if nothing was returned or rendered on the page.
     *
     * @return self
     */
    public function setRelatedLinksRequests($relatedLinksRequests)
    {
        if (is_null($relatedLinksRequests)) {
            throw new \InvalidArgumentException('non-nullable relatedLinksRequests cannot be null');
        }
        $this->container['relatedLinksRequests'] = $relatedLinksRequests;

        return $this;
    }

    /**
     * Gets relatedLinksImpressions.
     *
     * @return int|null
     */
    public function getRelatedLinksImpressions()
    {
        return $this->container['relatedLinksImpressions'];
    }

    /**
     * Sets relatedLinksImpressions.
     *
     * @param int|null $relatedLinksImpressions a funnel impression is counted for each funnel request that returned some content that was shown to the user
     *
     * @return self
     */
    public function setRelatedLinksImpressions($relatedLinksImpressions)
    {
        if (is_null($relatedLinksImpressions)) {
            throw new \InvalidArgumentException('non-nullable relatedLinksImpressions cannot be null');
        }
        $this->container['relatedLinksImpressions'] = $relatedLinksImpressions;

        return $this;
    }

    /**
     * Gets relatedLinksClicks.
     *
     * @return int|null
     */
    public function getRelatedLinksClicks()
    {
        return $this->container['relatedLinksClicks'];
    }

    /**
     * Sets relatedLinksClicks.
     *
     * @param int|null $relatedLinksClicks A funnel click is counted when a user clicks on a non-ad unit and some action is triggered. For example, the user clicks a related search term inside a related search unit and is taken to a search landing page.
     *
     * @return self
     */
    public function setRelatedLinksClicks($relatedLinksClicks)
    {
        if (is_null($relatedLinksClicks)) {
            throw new \InvalidArgumentException('non-nullable relatedLinksClicks cannot be null');
        }
        $this->container['relatedLinksClicks'] = $relatedLinksClicks;

        return $this;
    }

    /**
     * Gets relatedLinksRpm.
     *
     * @return float|null
     */
    public function getRelatedLinksRpm()
    {
        return $this->container['relatedLinksRpm'];
    }

    /**
     * Sets relatedLinksRpm.
     *
     * @param float|null $relatedLinksRpm Ad revenue per thousand funnel impressions is calculated by dividing your estimated earnings resulting from a funnel request by the number of funnel impressions that you received, then multiplying by 1,000.  Funnel RPM = (Estimated earnings resulting from the funnel / funnel impressions) * 1,000
     *
     * @return self
     */
    public function setRelatedLinksRpm($relatedLinksRpm)
    {
        if (is_null($relatedLinksRpm)) {
            throw new \InvalidArgumentException('non-nullable relatedLinksRpm cannot be null');
        }
        $this->container['relatedLinksRpm'] = $relatedLinksRpm;

        return $this;
    }

    /**
     * Gets adRequests.
     *
     * @return int|null
     */
    public function getAdRequests()
    {
        return $this->container['adRequests'];
    }

    /**
     * Sets adRequests.
     *
     * @param int|null $adRequests An ad request is counted whenever an ad unit on your site requests ads to be displayed. It is the number of ad units that requested ads (for content ads) or search queries (for search ads). We report an ad request each time a request was sent, even if no ads were returned and public service ads or backup ads were displayed instead.
     *
     * @return self
     */
    public function setAdRequests($adRequests)
    {
        if (is_null($adRequests)) {
            throw new \InvalidArgumentException('non-nullable adRequests cannot be null');
        }
        $this->container['adRequests'] = $adRequests;

        return $this;
    }

    /**
     * Gets matchedAdRequests.
     *
     * @return int|null
     */
    public function getMatchedAdRequests()
    {
        return $this->container['matchedAdRequests'];
    }

    /**
     * Sets matchedAdRequests.
     *
     * @param int|null $matchedAdRequests A matched request is counted for each ad request that returns at least one ad to the site. It's the number of ad units (for content ads) or search queries (for search ads) that showed ads.
     *
     * @return self
     */
    public function setMatchedAdRequests($matchedAdRequests)
    {
        if (is_null($matchedAdRequests)) {
            throw new \InvalidArgumentException('non-nullable matchedAdRequests cannot be null');
        }
        $this->container['matchedAdRequests'] = $matchedAdRequests;

        return $this;
    }

    /**
     * Gets adImpressions.
     *
     * @return int|null
     */
    public function getAdImpressions()
    {
        return $this->container['adImpressions'];
    }

    /**
     * Sets adImpressions.
     *
     * @param int|null $adImpressions An ad impression is reported whenever an ad has been downloaded to the user's device and has begun to load. Different ad formats display varying numbers of ads, for example, each time a vertical banner appears on your site you'll see two ad impressions in your reports.
     *
     * @return self
     */
    public function setAdImpressions($adImpressions)
    {
        if (is_null($adImpressions)) {
            throw new \InvalidArgumentException('non-nullable adImpressions cannot be null');
        }
        $this->container['adImpressions'] = $adImpressions;

        return $this;
    }

    /**
     * Gets impressions.
     *
     * @return int|null
     */
    public function getImpressions()
    {
        return $this->container['impressions'];
    }

    /**
     * Sets impressions.
     *
     * @param int|null $impressions An impression is counted for each ad request where at least one ad has begun to load on the user's device. It's the number of ad units (for content ads) or search queries (for search ads) that loaded ads.
     *
     * @return self
     */
    public function setImpressions($impressions)
    {
        if (is_null($impressions)) {
            throw new \InvalidArgumentException('non-nullable impressions cannot be null');
        }
        $this->container['impressions'] = $impressions;

        return $this;
    }

    /**
     * Gets clicks.
     *
     * @return int|null
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks.
     *
     * @param int|null $clicks The number of times that a user clicked on an ad
     *
     * @return self
     */
    public function setClicks($clicks)
    {
        if (is_null($clicks)) {
            throw new \InvalidArgumentException('non-nullable clicks cannot be null');
        }
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets ctr.
     *
     * @return float|null
     */
    public function getCtr()
    {
        return $this->container['ctr'];
    }

    /**
     * Sets ctr.
     *
     * @param float|null $ctr The click-through rate is the percentage of impressions that led to a click.  CTR = Clicks/Impression
     *
     * @return self
     */
    public function setCtr($ctr)
    {
        if (is_null($ctr)) {
            throw new \InvalidArgumentException('non-nullable ctr cannot be null');
        }
        $this->container['ctr'] = $ctr;

        return $this;
    }

    /**
     * Gets adCtr.
     *
     * @return float|null
     */
    public function getAdCtr()
    {
        return $this->container['adCtr'];
    }

    /**
     * Sets adCtr.
     *
     * @param float|null $adCtr the ad click-through rate is the number of ad clicks divided by the number of impressions for the page of ads that appears when a link unit is clicked
     *
     * @return self
     */
    public function setAdCtr($adCtr)
    {
        if (is_null($adCtr)) {
            throw new \InvalidArgumentException('non-nullable adCtr cannot be null');
        }
        $this->container['adCtr'] = $adCtr;

        return $this;
    }

    /**
     * Gets cpc.
     *
     * @return float|null
     */
    public function getCpc()
    {
        return $this->container['cpc'];
    }

    /**
     * Sets cpc.
     *
     * @param float|null $cpc The cost per click is the amount that you earn each time a user clicks on your ad. In your reports, CPC is calculated by dividing the estimated earnings by the number of clicks received.
     *
     * @return self
     */
    public function setCpc($cpc)
    {
        if (is_null($cpc)) {
            throw new \InvalidArgumentException('non-nullable cpc cannot be null');
        }
        $this->container['cpc'] = $cpc;

        return $this;
    }

    /**
     * Gets adRpm.
     *
     * @return float|null
     */
    public function getAdRpm()
    {
        return $this->container['adRpm'];
    }

    /**
     * Sets adRpm.
     *
     * @param float|null $adRpm Ad revenue per thousand impressions (RPM) is calculated by dividing your estimated earnings by the number of ad impressions that you received, then multiplying by 1000.  Ad RPM = (Estimated earnings/Ad impressions) * 1000
     *
     * @return self
     */
    public function setAdRpm($adRpm)
    {
        if (is_null($adRpm)) {
            throw new \InvalidArgumentException('non-nullable adRpm cannot be null');
        }
        $this->container['adRpm'] = $adRpm;

        return $this;
    }

    /**
     * Gets conversionRate.
     *
     * @return float|null
     */
    public function getConversionRate()
    {
        return $this->container['conversionRate'];
    }

    /**
     * Sets conversionRate.
     *
     * @param float|null $conversionRate Ad Clicks / Related Links Requests (full funnel conversion rate)
     *
     * @return self
     */
    public function setConversionRate($conversionRate)
    {
        if (is_null($conversionRate)) {
            throw new \InvalidArgumentException('non-nullable conversionRate cannot be null');
        }
        $this->container['conversionRate'] = $conversionRate;

        return $this;
    }

    /**
     * Gets revenue.
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue.
     *
     * @param float|null $revenue your account balance for the time period selected This amount is an estimate that is subject to change when your earnings are verified for accuracy at the end of every month
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            throw new \InvalidArgumentException('non-nullable revenue cannot be null');
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
